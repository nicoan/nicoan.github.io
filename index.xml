<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Nico Antinori</title>
    <link>https://nicoan.net/</link>
    <description>Recent content on Nico Antinori</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Apr 2025 12:00:00 -0300</lastBuildDate>
    <atom:link href="https://nicoan.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>When leaking memory makes sense: Leaking memory in Rust</title>
      <link>https://nicoan.net/posts/when_leaking_memory_makes_sense/</link>
      <pubDate>Tue, 01 Apr 2025 12:00:00 -0300</pubDate>
      <guid>https://nicoan.net/posts/when_leaking_memory_makes_sense/</guid>
      <description>&lt;p&gt;It is believed that it is impossible to leak memory with Rust, that is not true. Although is way more difficult to leak memory in Rust than in other languages, it can happen, sometimes by accident, and sometimes, by design. In this article we will explore some cases where leaking memory is useful.&lt;/p&gt;
&lt;h1 id=&#34;sharing-memory-between-threads&#34;&gt;Sharing memory between threads&lt;/h1&gt;
&lt;p&gt;Imagine that you have a value that it does not change and needs to be shared across several threads. If the value can be initialized with &lt;a href=&#34;http://doc.rust-lang.org/reference/const_eval.html#const-functions&#34;&gt;constant functions&lt;/a&gt; or values, you can use the &lt;a href=&#34;https://doc.rust-lang.org/std/keyword.static.html&#34;&gt;static&lt;/a&gt; keyword. But what if the value to be shared is not constant? What are the options?&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>It is believed that it is impossible to leak memory with Rust, that is not true. Although is way more difficult to leak memory in Rust than in other languages, it can happen, sometimes by accident, and sometimes, by design. In this article we will explore some cases where leaking memory is useful.</p>
<h1 id="sharing-memory-between-threads">Sharing memory between threads</h1>
<p>Imagine that you have a value that it does not change and needs to be shared across several threads. If the value can be initialized with <a href="http://doc.rust-lang.org/reference/const_eval.html#const-functions">constant functions</a> or values, you can use the <a href="https://doc.rust-lang.org/std/keyword.static.html">static</a> keyword. But what if the value to be shared is not constant? What are the options?</p>
<h2 id="using-arct">Using <code>Arc&lt;T&gt;</code></h2>
<p><a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a> is a smart pointer that allow us to share a value safely between threads. ”<code>Arc</code>” stands for “Atomically Reference Counted”. The value owned by the <code>Arc</code> can be read from different threads. Every time an <code>Arc</code> is cloned, the internal counter is incremented by one, and every time an <code>Arc</code> is dropped, the internal counter is decremented by one. Once the counter goes from 1 to 0, the resource owned by the Arc is cleaned up. For example:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::env;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::sync::Arc;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::thread;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> name: String <span style="color:#f92672">=</span> env::args().collect::<span style="color:#f92672">&lt;</span>Vec<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;&gt;</span>().remove(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> person_name: <span style="color:#a6e22e">Arc</span><span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> Arc::new(name);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> p <span style="color:#f92672">=</span> person_name.clone();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> t1 <span style="color:#f92672">=</span> thread::spawn(<span style="color:#66d9ef">move</span> <span style="color:#f92672">||</span> {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;Hello </span><span style="color:#e6db74">{p}</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> p <span style="color:#f92672">=</span> person_name.clone();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> t2 <span style="color:#f92672">=</span> thread::spawn(<span style="color:#66d9ef">move</span> <span style="color:#f92672">||</span> {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;Bye </span><span style="color:#e6db74">{p}</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> _ <span style="color:#f92672">=</span> t1.join();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> _ <span style="color:#f92672">=</span> t2.join();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>This program receives a name by argument and spawns two threads that read that value. In this example there is no leak: Once the threads finish executing, the <code>Arc</code> is dropped and when the main thread exits, the value is cleaned up, since the <code>Arc</code> owned by the main function is the last reference to the name.</p>
<h2 id="leaking-memory-with-boxleak">Leaking memory with <code>Box::leak</code></h2>
<p>Instead of creating an <code>Arc</code> and moving the clones where we need, we can leak the memory with <a href="https://doc.rust-lang.org/std/boxed/struct.Box.html#method.leak"><code>Box::leak</code></a> and share it with the threads:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::env;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::thread;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> name: String <span style="color:#f92672">=</span> env::args().collect::<span style="color:#f92672">&lt;</span>Vec<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;&gt;</span>().remove(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex; background-color:#3c3d38"><span>    <span style="color:#66d9ef">let</span> person_name: <span style="color:#66d9ef">&amp;</span>&#39;static String <span style="color:#f92672">=</span> Box::leak(Box::new(name));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> t1 <span style="color:#f92672">=</span> thread::spawn(<span style="color:#66d9ef">move</span> <span style="color:#f92672">||</span> {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;Hello </span><span style="color:#e6db74">{person_name}</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> t2 <span style="color:#f92672">=</span> thread::spawn(<span style="color:#66d9ef">move</span> <span style="color:#f92672">||</span> {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;Bye </span><span style="color:#e6db74">{person_name}</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> _ <span style="color:#f92672">=</span> t1.join();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> _ <span style="color:#f92672">=</span> t2.join();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>In line 6, we are leaking the memory creating an <em>static reference</em> and then moving it to the spawned threads so they can be read by them <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>The code showed above is just an example, an actual useful case for leaking memory and reading  it from threads or async tasks is having a global configuration loaded at runtime that we know it won’t change for the entire time the program is beign executed.</p>
<p>If we check this code with <a href="https://valgrind.org/">valgrind</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>valgrind ./target/release/box_leak John
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span> Memcheck, a memory error detector
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span> Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> 2002-2017, and GNU GPL<span style="color:#960050;background-color:#1e0010">&#39;</span>d, by Julian Seward et al.
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span> Using Valgrind-3.16.1 and LibVEX; rerun with -h <span style="color:#66d9ef">for</span> copyright info
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span> Command: ./target/release/box_leak John
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span>Bye John
</span></span><span style="display:flex;"><span>Hello John
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span> HEAP SUMMARY:
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>     in use at exit: <span style="color:#ae81ff">28</span> bytes in <span style="color:#ae81ff">2</span> blocks
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>   total heap usage: <span style="color:#ae81ff">27</span> allocs, <span style="color:#ae81ff">25</span> frees, 4,229 bytes allocated
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span> LEAK SUMMARY:
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>    definitely lost: <span style="color:#ae81ff">24</span> bytes in <span style="color:#ae81ff">1</span> blocks
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>    indirectly lost: <span style="color:#ae81ff">4</span> bytes in <span style="color:#ae81ff">1</span> blocks
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>      possibly lost: <span style="color:#ae81ff">0</span> bytes in <span style="color:#ae81ff">0</span> blocks
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>    still reachable: <span style="color:#ae81ff">0</span> bytes in <span style="color:#ae81ff">0</span> blocks
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>         suppressed: <span style="color:#ae81ff">0</span> bytes in <span style="color:#ae81ff">0</span> blocks
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span> Rerun with --leak-check<span style="color:#f92672">=</span>full to see details of leaked memory
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span> For lists of detected and suppressed errors, rerun with: -s
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>691<span style="color:#f92672">==</span> ERROR SUMMARY: <span style="color:#ae81ff">0</span> errors from <span style="color:#ae81ff">0</span> contexts <span style="color:#f92672">(</span>suppressed: <span style="color:#ae81ff">0</span> from 0<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>We effectively see that <strong>not all</strong> memory was freed.</p>
<h1 id="foreign-function-interfaces-ffi">Foreign Function Interfaces (FFI)</h1>
<p>Libraries created in Rust can be used in other languages (commonly C) through <a href="https://doc.rust-lang.org/nomicon/ffi.html">Foreign Function Interfaces</a>. In other languages, the way of doing things are usually different than in Rust. For example, in C, exists the “<a href="https://en.wikipedia.org/wiki/Opaque_pointer">Opaque Pointer Pattern</a>”. The objetive of this pattern is to hide implementations details by using an <em>opaque pointer</em>. To implement this pattern, we need a function to create the struct with hidden implementation details, functions to operate on it, and a function to destroy it.</p>
<p>Suppose you want to reimplement a stack data structure, originally written in C, using Rust. Here’s the header file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#ifndef STACK_H
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define STACK_H
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdbool.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// This is the opaque type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> Stack Stack;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Stack <span style="color:#f92672">*</span><span style="color:#a6e22e">stack_create</span>(<span style="color:#66d9ef">int</span> capacity);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">stack_destroy</span>(Stack <span style="color:#f92672">*</span>stack);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">stack_push</span>(Stack <span style="color:#f92672">*</span>stack, <span style="color:#66d9ef">int</span> value);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">stack_pop</span>(Stack <span style="color:#f92672">*</span>stack, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>out);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">stack_peek</span>(<span style="color:#66d9ef">const</span> Stack <span style="color:#f92672">*</span>stack, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>out);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">stack_is_empty</span>(<span style="color:#66d9ef">const</span> Stack <span style="color:#f92672">*</span>stack);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif
</span></span></span></code></pre></div><h2 id="data-representation">Data representation</h2>
<p>To re-implement the stack library, we need to represent the stack in Rust and follow the interface from the header file. For this implementation, we&rsquo;ll use a <a href="https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<!-- raw HTML omitted --></a> structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Stack</span> <span style="color:#f92672">=</span> Vec<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">i32</span><span style="color:#f92672">&gt;</span>;
</span></span></code></pre></div><h2 id="allocating-memory-and-leaking-it">Allocating memory and leaking it</h2>
<p>Following the interface defined by the header file, we need to create a function that takes the capacity of the stack and returns a pointer to it. This means that we need to allocate in memory some kind of data that represents a <code>Stack</code> structure (in this case a <code>Vec&lt;i32&gt;</code>) and return a pointer to it. This is implemented as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[unsafe(no_mangle)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">stack_create</span>(capacity: <span style="color:#66d9ef">usize</span>) -&gt; <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> Stack {
</span></span><span style="display:flex;"><span>    Box::into_raw(Box::new(Vec::with_capacity(capacity)))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>What we do in this function is create the <code>Vec</code> with the capacity passed by argument, save it inside a <code>Box</code> and use <a href="https://doc.rust-lang.org/std/boxed/struct.Box.html#method.into_raw"><code>Box::into_raw</code></a> to consume the Box and return a raw pointer to the vector. This means that the vector is allocated in memory and is accesible by our program, but now it is our responsibility to be sure that the pointer is allocated with the <code>Stack</code> representation when we want to use it and to release the memory when we do not need it anymore.</p>
<p>This is analogous to using <a href="https://en.cppreference.com/w/c/memory/malloc">malloc</a> to allocate memory for the data structure and initialize it with values in C.</p>
<h2 id="reclaiming-the-leaked-memory-to-release-it">Reclaiming the leaked memory to release it</h2>
<p>If we do not free the <code>Stack</code> allocated by the function <code>stack_create</code>, we will indeed have created a memory leak. The header file declares a function to destroy it, here’s the implementation in Rust:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[unsafe(no_mangle)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">unsafe</span> <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">stack_destroy</span>(stack: <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> Stack) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">!</span>stack.is_null() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> _ <span style="color:#f92672">=</span> <span style="color:#66d9ef">unsafe</span> { Box::from_raw(stack) };
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, if the stack pointer is not <code>null</code>, we reconstruct the <code>Box</code> to reclaim the ownership of the allocated memory. The created <code>Box</code> is immediately dropped, releasing the memory.</p>
<p>If we compile the <a href="https://github.com/nicoan/personal-site/blob/main/codes/rust_leak/stack_rust/src/main.c"><code>main.c</code></a> program and verify it with <a href="https://valgrind.org/">valgrind</a>, we see that there’s no leak</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ valgrind ./main
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span> Memcheck, a memory error detector
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span> Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> 2002-2017, and GNU GPL<span style="color:#960050;background-color:#1e0010">&#39;</span>d, by Julian Seward et al.
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span> Using Valgrind-3.16.1 and LibVEX; rerun with -h <span style="color:#66d9ef">for</span> copyright info
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span> Command: ./main
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span>Top of stack: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>Popped: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>Popped: 10
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span> HEAP SUMMARY:
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span>     in use at exit: <span style="color:#ae81ff">0</span> bytes in <span style="color:#ae81ff">0</span> blocks
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span>   total heap usage: <span style="color:#ae81ff">3</span> allocs, <span style="color:#ae81ff">3</span> frees, 1,056 bytes allocated
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span> All heap blocks were freed -- no leaks are possible
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span> For lists of detected and suppressed errors, rerun with: -s
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>580<span style="color:#f92672">==</span> ERROR SUMMARY: <span style="color:#ae81ff">0</span> errors from <span style="color:#ae81ff">0</span> contexts <span style="color:#f92672">(</span>suppressed: <span style="color:#ae81ff">0</span> from 0<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>We can see that there are no leaks! So, technically we did not leaked memory, it was just a temporal thing from the Rust perspective, and, from C’s perspective, we were simply allocating memory and freeing it correctly afterward.</p>
<p>You can find the full implementation of both C and Rust <a href="https://github.com/nicoan/personal-site/tree/main/codes/rust_leak">here</a>.</p>
<h2 id="can-boxleak-be-used-instead-of-boxinto_raw">Can <code>Box::leak</code> be used instead of <code>Box::into_raw</code>?</h2>
<p>Yes, but in my opinion you should not. Semantically, using <code>Box::from_raw</code> to re-create a <code>Box</code> from a <code>Box::leak</code> is incorrect because, technically, you did not intend to leak memory if you reclaim it with the objetive of releasing it. Check out the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">reconstruct_and_drop</span>(value: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">mut</span> <span style="color:#66d9ef">i32</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> _ <span style="color:#f92672">=</span> <span style="color:#66d9ef">unsafe</span> { Box::from_raw(value <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> <span style="color:#66d9ef">i32</span>) };
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> value <span style="color:#f92672">=</span> Box::new(<span style="color:#ae81ff">42</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> static_value: <span style="color:#66d9ef">&amp;</span>&#39;static <span style="color:#a6e22e">mut</span> <span style="color:#66d9ef">i32</span> <span style="color:#f92672">=</span> Box::leak(value);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;The value is </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, static_value);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    reconstruct_and_drop(static_value);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;The value is </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, static_value);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This results in the following output:</p>
<pre tabindex="0"><code>The value is 42
The value is 431898688
</code></pre><p>Here, we leak the value <code>42</code>, and we give it a <code>'static</code> lifetime. <a href="https://doc.rust-lang.org/stable/book/ch10-03-lifetime-syntax.html?highlight=%27static#the-static-lifetime">Citing the Rust Book</a>:</p>
<blockquote>
<p>But before specifying <code>'static</code> as the lifetime for a reference, <strong>think about whether the reference you have actually lives the entire lifetime of your program or not</strong>, and whether you want it to</p></blockquote>
<p>Additionally, by definition, a <a href="https://doc.rust-lang.org/stable/book/ch04-02-references-and-borrowing.html">reference</a> is valid throughout its entire lifetime, unlike a raw pointer.</p>
<blockquote>
<p>Unlike a pointer, a reference is guaranteed to point to a valid value of a particular type for the life of that reference.</p></blockquote>
<p>And <code>Box::leak</code> returns a reference that, as showed in the example above, we can invalidate. The example is very simple and the error can be spotted right away, but in a larger codebase, this could become a bug hard to find and fix.</p>
<p>In situations where we need a raw pointer and know we are going to reclaim the memory to release it is semantically correct to use the <code>Box::into_raw</code> / <code>Box::from_raw</code> pair of functions.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Even though leaking memory can be an useful resource, it must be used with care. We can’t abuse this mechanism because we can create unintended problems, like running out of memory, or consuming too much of it without an specific purpose.</p>
<p>But, why re-implement things in Rust and use these tricks? This would require a whole article to explain, but the short answer is that even though you need to use <a href="https://doc.rust-lang.org/std/keyword.unsafe.html"><code>unsafe</code></a> keyword from time to time, if used correctly, you still have a lot of compile-time checks and safety guarantees that Rust provides out of the box.</p>
<p>Lastly, a real-word scenario where this technique is used is the <a href="https://www.redox-os.org/">Redox OS</a>’s libc re-implementation in Rust called <a href="https://gitlab.redox-os.org/redox-os/relibc">relibc</a> (for example, in the <a href="https://pubs.opengroup.org/onlinepubs/009696599/functions/regcomp.html">regcomp</a> function <a href="https://gitlab.redox-os.org/redox-os/relibc/-/blob/28713e6bf186b9a22f873b6abe9654e97ac0db39/src/header/regex/mod.rs#L62">here’s</a> the <code>Box::into_raw</code>, and in the <a href="https://pubs.opengroup.org/onlinepubs/009696599/functions/regfree.html">regfree</a> function <a href="https://gitlab.redox-os.org/redox-os/relibc/-/blob/28713e6bf186b9a22f873b6abe9654e97ac0db39/src/header/regex/mod.rs#L83">here’s</a> the <code>Box::from_raw</code>)</p>
<h1 id="references">References</h1>
<ol>
<li><a href="https://marabos.nl/atomics/basics.html#shared-ownership-and-reference-counting">https://marabos.nl/atomics/basics.html#shared-ownership-and-reference-counting</a></li>
</ol>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>You may wonder why we need to use the <a href="https://doc.rust-lang.org/std/keyword.move.html">move</a> keyword if we are creating an <code>’static</code> reference. Remember that closures capture their environment by reference, so what we are really capturing here is a <code>&amp;&amp;'static String</code> and not a <code>&amp;'static String</code> where the <em>outer</em> reference is <strong>not</strong> <code>'static</code>.
When using move, we are “moving” <code>&amp;'static String</code> into the thread, but, since they are references and references are <a href="https://doc.rust-lang.org/std/marker/trait.Copy.html">Copy</a>, we just copy the reference inside of the thread, not destroying it outside.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Cross compiling Rust using Docker</title>
      <link>https://nicoan.net/posts/cross_compiling_using_docker/</link>
      <pubDate>Thu, 06 Mar 2025 12:00:00 -0300</pubDate>
      <guid>https://nicoan.net/posts/cross_compiling_using_docker/</guid>
      <description>&lt;p&gt;A while ago, I published an app that I originally made for myself but thought it would be useful for others: &lt;a href=&#34;https://kindlyrss.app/&#34;&gt;Kindly RSS Reader&lt;/a&gt;. Kindly RSS Reader is a self-hosted RSS aggregator designed for e-ink devices and optimized for low-end computers such as the Raspberry Pi. In fact, I run it on a Raspberry Pi 3B powered by a USB port.&lt;/p&gt;
&lt;p&gt;The only way to deploy it at the moment is via Docker (or compiling the source and running it by manually). I’ve uploaded the image in &lt;a href=&#34;https://hub.docker.com/r/nicoan/kindly-rss-reader/&#34;&gt;Docker Hub&lt;/a&gt;. In the future, I plan to create a &lt;code&gt;.deb&lt;/code&gt; package and other formats to make deployment more flexible.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>A while ago, I published an app that I originally made for myself but thought it would be useful for others: <a href="https://kindlyrss.app/">Kindly RSS Reader</a>. Kindly RSS Reader is a self-hosted RSS aggregator designed for e-ink devices and optimized for low-end computers such as the Raspberry Pi. In fact, I run it on a Raspberry Pi 3B powered by a USB port.</p>
<p>The only way to deploy it at the moment is via Docker (or compiling the source and running it by manually). I’ve uploaded the image in <a href="https://hub.docker.com/r/nicoan/kindly-rss-reader/">Docker Hub</a>. In the future, I plan to create a <code>.deb</code> package and other formats to make deployment more flexible.</p>
<h1 id="issues-requesting-support-for-other-architectures">Issues requesting support for other architectures</h1>
<p>I was pleasantly surprised by the attention the project received. After a week of publishing the repository I got received two issues asking to <a href="https://github.com/nicoan/kindly-rss-reader/issues/5">support older arm architectures</a> and for <a href="https://github.com/nicoan/kindly-rss-reader/issues/7">x86_64</a>.</p>
<p>Supporting more architectures was something I had in mind from the beginning of the project. There are a lot of single-board and low end computers out there that could run the project, so I was happy to see people interested in running it on different architectures.</p>
<h1 id="the-approach">The approach</h1>
<p>At the moment I got two computers: A MacBook running an ARMv8 and an old desktop running x86_64. I wanted the build process to be as portable as possible, so I could use either machine, and I usually do not like to install things in the OS unless is absolutely necessary. Using docker for building met both my requirements.</p>
<h2 id="the-final-images">The final images</h2>
<p>I wanted the final images to be as lightweight as possible. That’s why I opted for <a href="https://alpinelinux.org/">Alpine Linux</a> <a href="https://hub.docker.com/_/alpine">docker images</a>. Alpine Linux is a small<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> linux distribution focused on security.</p>
<p>One thing that differentiates Alpine from other distributions is that it uses <a href="https://www.musl-libc.org/">musl C library</a> instad of <a href="https://www.gnu.org/software/libc/">GNU C Library</a>. This is an important detail for cross-compilation.</p>
<h2 id="the-linkers-image">The linkers image</h2>
<p>To be able to cross compile projects, we need to use different linkers: one for each target architecture. The target architectures are <code>armv6</code>, <code>armv7</code>, <code>arm64v8</code> (or <code>aarch64</code>) and <code>x86_64</code>.</p>
<p>The first step was to create a Docker image containing all the necessary linkers. To download and install the them I used the <a href="https://github.com/richfelker/musl-cross-make">musl-cross-make</a> project.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#75715e"># This image will be used for building the project in different platforms</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> rust:1.84-bullseye AS builder</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /home</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> git clone https://github.com/richfelker/musl-cross-make.git --depth <span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># armv6</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> cd musl-cross-make <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#39;TARGET = arm-linux-musleabihf&#39;</span> &gt; config.mak <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#39;OUTPUT = /build/cross-armv6&#39;</span> &gt;&gt; config.mak <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> make <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> make install<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># armv7</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> cd musl-cross-make <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#39;TARGET = armv7-linux-musleabihf&#39;</span> &gt; config.mak <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#39;OUTPUT = /build/cross-armv7&#39;</span> &gt;&gt; config.mak <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> make <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> make install<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># arm64v8</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> cd musl-cross-make <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#39;TARGET = aarch64-linux-musl&#39;</span> &gt; config.mak <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#39;OUTPUT = /build/cross-armv8&#39;</span> &gt;&gt; config.mak <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> make <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> make install<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># x86_64</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> cd musl-cross-make <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#39;TARGET = x86_64-linux-musl&#39;</span> &gt; config.mak <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#39;OUTPUT = /build/cross-x86_64&#39;</span> &gt;&gt; config.mak <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> make <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> make install<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/bin/bash&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>As base image, I used <code>rust:1.84-bullseye</code> because it includes all the tools I need for building the project (with the exception of the additional targets, which will be installed manually in the respective Dockerfile).</p>
<p>The command used for building this image is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker build <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --tag nicoan/kindly-rss-builder <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -f ./dockerfiles/Dockerfile.build <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    .
</span></span></code></pre></div><h2 id="building-the-images">Building the images</h2>
<p>To build the project, I use four different Dockerfiles: One for each architecture. I could have created one Dockerfile with parameters but I wanted to take advantage of the Docker’s layer caching mechanism. Here’s the Dockerfile for the <code>armv6</code> architecture:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> --platform=$BUILDPLATFORM nicoan/kindly-rss-builder AS builder</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /home</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> PATH<span style="color:#f92672">=</span>$PATH:/build/cross-armv6/bin<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> CARGO_TARGET_ARM_UNKNOWN_LINUX_MUSLEABIHF_LINKER<span style="color:#f92672">=</span>arm-linux-musleabihf-gcc<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> rustup target add arm-unknown-linux-musleabihf<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . ./<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> cargo build --target arm-unknown-linux-musleabihf --release<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine:3 AS run</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> mkdir -p /home/kindlyrss/static_data <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> mkdir -p /home/kindlyrss/data<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 3000/tcp</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /home/target/arm-unknown-linux-musleabihf/release/kindle-rss-reader /usr/local/bin/kindlyrss<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /home/templates/ /home/kindlyrss/static_data/templates/<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /home/migrations/ /home/kindlyrss/static_data/migrations/<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /home/static/ /home/kindlyrss/static_data/static/<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /home/config/config.json /home/kindlyrss/data/config.json<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> RUST_LOG<span style="color:#f92672">=</span>info
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ENV</span> MAX_ARTICLES_QTY_TO_DOWNLOAD<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ENV</span> STATIC_DATA_PATH<span style="color:#f92672">=</span>/home/kindlyrss/static_data<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> DATA_PATH<span style="color:#f92672">=</span>/home/kindlyrss/data<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;kindlyrss&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>The idea is to use a multi-stage build with two stages: <code>build</code> and <code>run</code>.</p>
<p>In the <code>build</code> stage:</p>
<ul>
<li>Line 1: We use <a href="https://www.notion.so/Cross-compiling-Rust-using-Docker-1a7a491da87e80f4a7b9e67ba2ebc738?pvs=21">the linkers image</a> with the <code>--platform=$BUILDPLATFORM</code> parameter to ensure that no emulation will be used in this stage.</li>
<li>Line 5: We add to the <code>$PATH</code> environment variable the path where the linker’s binaries are located.</li>
<li>Line 6: We tell cargo which linker we are going to use for compiling <code>armv6</code>. This can be done through <a href="https://doc.rust-lang.org/cargo/reference/config.html#environment-variables">environment variables</a> or <a href="https://doc.rust-lang.org/cargo/reference/config.html#configuration-format">with a configuration file</a>. The shape of the environment variables specifying the linker is <code>CARGO_TARGET_&lt;triple&gt;_LINKER</code>. The format of the <a href="https://doc.rust-lang.org/cargo/commands/cargo-build.html#compilation-options"><code>&lt;triple&gt;</code></a>  is <code>&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>.
The four environment variables used are:
<ul>
<li><code>CARGO_TARGET_ARM_UNKNOWN_LINUX_MUSLEABIHF_LINKER</code> for <code>armv6</code></li>
<li><code>CARGO_TARGET_ARMV7_UNKNOWN_LINUX_MUSLEABIHF_LINKER</code> for <code>armv7</code></li>
<li><code>CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER</code> for <code>arm64v8</code></li>
<li><code>CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER</code> for <code>x86_64</code></li>
</ul>
</li>
<li>Line 8: We add the <code>arm-unknown-linux-musleabihf</code> target to be able to build the project for the <code>armv6</code> architecture using the musl C library.
The four targets used are:
<ul>
<li><code>arm-unknown-linux-musleabihf</code> for <code>armv6</code></li>
<li><code>armv7-unknown-linux-musleabihf</code> for <code>armv7</code></li>
<li><code>aarch64-unknown-linux-musl</code> for <code>arm64v8</code></li>
<li><code>x86_64-unknown-linux-musl</code> for <code>x86_64</code></li>
</ul>
</li>
<li>Line 9: We copy the source.</li>
<li>Line 11: We build the project in release mode targeting the <code>armv6</code> architecture.</li>
</ul>
<p>The <code>run</code> stage will be built using <code>alpine</code> as base. This stage is the last one and will output the <a href="https://www.notion.so/Cross-compiling-Rust-using-Docker-1a7a491da87e80f4a7b9e67ba2ebc738?pvs=21">final image</a> for <code>armv6</code>. Here, we copy the binary file and all the files needed by it to run the application correctly from the <code>builder</code> stage, expose the port <code>3000</code> and set some configurations using environment variables. After that we execute the binary to run the application.</p>
<p>Note that in the Dockerfile is never specified the platform to be used. This is done using the <a href="https://docs.docker.com/build/building/multi-platform/#build-multi-platform-images"><code>--platform</code> argument</a> in the <code>docker build</code> command.</p>
<p>The command used to build this image is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker build <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --tag nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-armv6 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --platform linux/arm/v6 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -f ./dockerfiles/Dockerfile.armv6 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    .
</span></span></code></pre></div><p>where <code>$(PACKAGE_VERSION)</code> is the app version.</p>
<h2 id="publishing-the-images">Publishing the images</h2>
<p>To publish the images we just need a <a href="https://hub.docker.com/">Docker Hub</a> account and use the <code>docker push</code> command. Since we are supporting more than one architecture, it would be nice to have all the images targeting different platforms grouped in the same tag. This can be achieved by pushing all the different images separately and then creating a manifest pointing at them under the same tag.</p>
<p>For example, for version <code>0.1.0</code>, we first push the four images:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker push nicoan/kindly-rss-reader:0.1.0-x86_64
</span></span><span style="display:flex;"><span>docker push nicoan/kindly-rss-reader:0.1.0-arm64v8
</span></span><span style="display:flex;"><span>docker push nicoan/kindly-rss-reader:0.1.0-armv7
</span></span><span style="display:flex;"><span>docker push nicoan/kindly-rss-reader:0.1.0-armv6
</span></span></code></pre></div><p>After that we create a manifest file for the tag <code>0.1.0</code> attaching all the images that we just pushed to the hub:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker manifest create nicoan/kindly-rss-reader:0.1.0 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --amend nicoan/kindly-rss-reader:0.1.0-x86_64 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --amend nicoan/kindly-rss-reader:0.1.0-arm64v8 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --amend nicoan/kindly-rss-reader:0.1.0-armv7 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --amend nicoan/kindly-rss-reader:0.1.0-armv6
</span></span></code></pre></div><p>And push it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker manifest push nicoan/kindly-rss-reader:0.1.0
</span></span></code></pre></div><p>The same thing can be done with the <code>latest</code> tag with an extra step: we first need to delete its manifest and then re-create it with the images we want to group. If we don’t do the delete step, the new images will be grouped with all the previous ones.</p>
<h1 id="doing-all-this-process-semi-automatically">Doing all this process semi-automatically</h1>
<p>I am not good at remembering all the arguments and details of the commands I use. That’s why I usually try to create scripts to automate the processes. In this case I opted to use a good old <code>Makefile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-makefile" data-lang="makefile"><span style="display:flex;"><span><span style="color:#75715e"># Extract the version from Cargo.toml
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>PACKAGE_VERSION<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>shell cat Cargo.toml | grep version | head -n <span style="color:#ae81ff">1</span> | awk <span style="color:#e6db74">&#39;{print $$3}&#39;</span> | sed -e <span style="color:#e6db74">&#39;s/&#34;//g&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Build for different archs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># I opted to use multiple Dockerfiles to take advantage of the layer caching mechanism.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">docker-build</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	docker build <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--tag nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-x86_64 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		-f ./dockerfiles/Dockerfile.x86_64 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--platform linux/amd64 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		.
</span></span><span style="display:flex;"><span>	docker build <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--tag nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-arm64v8 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		-f ./dockerfiles/Dockerfile.armv8 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--platform linux/arm64/v8 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		.
</span></span><span style="display:flex;"><span>	docker build <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--tag nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-armv6 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--platform linux/arm/v6 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		-f ./dockerfiles/Dockerfile.armv6 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		.
</span></span><span style="display:flex;"><span>	docker build <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--tag nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-armv7 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--platform linux/arm/v7 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		-f ./dockerfiles/Dockerfile.armv7 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Builds an image with different linkers to be able to build
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># for different architectures
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">docker-prepare-build-image</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	docker build <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--tag nicoan/kindly-rss-builder <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		-f ./dockerfiles/Dockerfile.build <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Push new versions
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">docker-push</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Push different architecture images</span>
</span></span><span style="display:flex;"><span>	docker push nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-x86_64
</span></span><span style="display:flex;"><span>	docker push nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-arm64v8
</span></span><span style="display:flex;"><span>	docker push nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-armv7
</span></span><span style="display:flex;"><span>	docker push nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-armv6
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Create manifest for the package version and push</span>
</span></span><span style="display:flex;"><span>	docker manifest create nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--amend nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-x86_64 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--amend nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-arm64v8 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--amend nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-armv7 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--amend nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-armv6
</span></span><span style="display:flex;"><span>	docker manifest push nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Create manifest for the latest tag and push</span>
</span></span><span style="display:flex;"><span>	docker manifest rm nicoan/kindly-rss-reader:latest
</span></span><span style="display:flex;"><span>	docker manifest create nicoan/kindly-rss-reader:latest <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--amend nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-x86_64 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--amend nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-arm64v8 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--amend nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-armv7 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>		--amend nicoan/kindly-rss-reader:<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>-armv6
</span></span><span style="display:flex;"><span>	docker manifest push nicoan/kindly-rss-reader:latest
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">git-tag-and-push</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	git tag v<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>	git push origin v<span style="color:#66d9ef">$(</span>PACKAGE_VERSION<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> build-docker docker-push docker-prepare-build-image git-tag-and-push
</span></span></code></pre></div><p>This way, I just have to write in the terminal</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>make docker-prepare-build-image
</span></span><span style="display:flex;"><span>make docker-build
</span></span><span style="display:flex;"><span>make docker-push
</span></span></code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>Using Docker to cross-compile Rust projects ensures portability and ease of deployment. This process could be used in some CI/CD pipeline fully automate the process.</p>
<h1 id="resources">Resources</h1>
<ol>
<li><a href="https://docs.docker.com/build/building/multi-platform/">https://docs.docker.com/build/building/multi-platform/</a></li>
<li><a href="https://doc.rust-lang.org/cargo/reference/config.html">https://doc.rust-lang.org/cargo/reference/config.html</a></li>
<li><a href="https://www.docker.com/blog/multi-arch-build-and-images-the-simple-way/">https://www.docker.com/blog/multi-arch-build-and-images-the-simple-way/</a></li>
</ol>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Compressed docker images are around 3.5 MBs while Debian stable slim are around 25MBs.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Accelerating Rust compilation times: Dynamic linking, code generation and cache</title>
      <link>https://nicoan.net/posts/accelerating_compile_times/</link>
      <pubDate>Wed, 02 Oct 2024 12:00:00 -0300</pubDate>
      <guid>https://nicoan.net/posts/accelerating_compile_times/</guid>
      <description>&lt;p&gt;Having a language that does a lot of checks at compile time is not free, it will impact compilation times. Luckily there are some things we can do to speed things up: Dynamic linking, be careful with code generation and caching dependencies.&lt;/p&gt;
&lt;p&gt;Dynamic linking is a somewhat difficult thing to achieve in Rust but not impossible. The main reason is that at the time of writing this (Sept-Oct 2024) Rust does not have its own &lt;a href=&#34;https://en.wikipedia.org/wiki/Application_binary_interface&#34;&gt;stable ABI&lt;/a&gt; and it must rely on the &lt;a href=&#34;https://doc.rust-lang.org/nomicon/other-reprs.html#reprc&#34;&gt;C binary representation&lt;/a&gt; (if we want to inter-operate with other languages or &lt;em&gt;other Rust versions&lt;/em&gt;). This has some interesting consequences that we will explore in this post.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Having a language that does a lot of checks at compile time is not free, it will impact compilation times. Luckily there are some things we can do to speed things up: Dynamic linking, be careful with code generation and caching dependencies.</p>
<p>Dynamic linking is a somewhat difficult thing to achieve in Rust but not impossible. The main reason is that at the time of writing this (Sept-Oct 2024) Rust does not have its own <a href="https://en.wikipedia.org/wiki/Application_binary_interface">stable ABI</a> and it must rely on the <a href="https://doc.rust-lang.org/nomicon/other-reprs.html#reprc">C binary representation</a> (if we want to inter-operate with other languages or <em>other Rust versions</em>). This has some interesting consequences that we will explore in this post.</p>
<p><a href="https://rustc-dev-guide.rust-lang.org/overview.html#code-generation">Code generation</a> is when the high level representation of the source code is turned into binary code that can be executed by the machine. Given that the rust compiler uses <a href="https://llvm.org/">LLVM</a>, the level of optimizations and the quantity of generated code will affect the compilation speed.</p>
<h1 id="what-is-linking">What is Linking?</h1>
<p>Programs are usually divided into several modules and they have numerous dependencies. Linking is a compilation stage where all the compiled code of those modules needed by a program (and the code of the program itself) is made available in the final executable. We have two ways of linking a program: static and dynamic.</p>
<h2 id="static-linking">Static Linking</h2>
<p>All the code needed by a program (from external modules and the program itself) is put together in the final executable. This creates fat binaries but it makes the program portable.</p>
<h2 id="dynamic-linking">Dynamic Linking</h2>
<p>This type of linking must be supported by the operating system (most, if not all of the major operating systems support this). In this approach, instead of containing all the code needed, the executable contains undefined symbols and a list of objects that contain the code for those symbols.</p>
<p>These objects, often referred to as libraries, are binary files used to share binary code between several programs. In Microsoft Windows those files are known as DLLs (dynamically-linked library) and in Unix operating systems (Linux, Mac OS, etc) are known as SOs (shred objects).</p>
<p>When running a dynamically linked executable, the operating system loads the program code along with the libraries in memory and do the final linking.</p>
<p>This approach creates “thin” binaries and saves disk and memory space, since the code from the libraries are shared among several applications.</p>
<h2 id="different-linking-modes-in-rust">Different linking modes in Rust</h2>
<p>There are several different linking modes that we can use, producing different kind of shared objects, but in this post we will focus only on one of them: <code>dylib</code>.</p>
<p>If we put this configuration in our <em>library</em> crates, the Rust compiler will generate a dynamic library that will be dynamically linked with our executable. Isn’t that what we need? Why do we have other configurations?<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Given that Rust does not have an stable ABI yet, there are no guarantees that the compiled libraries will work if we don’t compile the project with the same Rust version used for compiling the library.</p>
<p>This mode is suitable for a project where we have one or more library crates that are used by several binary crates (or other libraries). We will usually compile everything altogether the first time and then recompile only the things we change. If we change the Rust version, we need to recompile everything.</p>
<h1 id="compilation-stages">Compilation stages</h1>
<p>To generate binary objects, Rust compiler must go through <a href="https://rustc-dev-guide.rust-lang.org/overview.html#what-the-compiler-does-to-your-code">several different stages</a>. I am not going to explain how a compiler works in detail, but having a general idea of what happens will help us identify places where we can work to optimize compile times.</p>
<p>To measure compilation times, we will use the built-in cargo tool called <a href="https://doc.rust-lang.org/cargo/reference/timings.html"><em>timings</em></a>. This tool will generate a detailed HTML report showing how long every compilation unit takes to compile.</p>
<h2 id="from-source-code-to-intermediate-representation">From source code to intermediate representation</h2>
<p>In the timings report, the stages described below are pictured in light blue in the Grantt chart.</p>
<h3 id="lexing-and-parsing">Lexing and parsing</h3>
<p>The compiler first performs the <a href="https://rustc-dev-guide.rust-lang.org/overview.html#lexing-and-parsing">lexing and parsing stage</a>, where lexing is transforming the source code into an stream of tokens and parsing is generating an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST (Abstract Syntax Tree)</a> from those tokens.</p>
<p><a href="https://rustc-dev-guide.rust-lang.org/macro-expansion.html">Macro expansion</a> (generating valid Rust code from the macros) is also done at this stage.</p>
<h3 id="ast-lowering">AST Lowering</h3>
<p>After the AST is created, it is converted into a High Level Intermediate Representation (HIR), this stage is called <a href="https://rustc-dev-guide.rust-lang.org/overview.html#ast-lowering">AST Lowering</a>. In HIR the compiler does type inference, type checking and resolve traits.</p>
<h3 id="mir-lowering">MIR Lowering</h3>
<p>When HIR is ready, then we enter the <a href="https://rustc-dev-guide.rust-lang.org/overview.html#mir-lowering">MIR lowering stage</a>, that is, transforming HIR to Middle Level Representation (MIR). In this stage, the famous borrow checking is done, <a href="https://en.wikipedia.org/wiki/Monomorphization">code monomorphization</a>, and some optimizations that will improve code generation and compilation speed in that stage.</p>
<h2 id="code-generation">Code generation</h2>
<p>This stage is pictured in purple in the Grantt chart. When we are here, the compiler already has everything represented in MIR. During this phase, the MIR is transformed into LLVM-IR (LLVM Intermediate Representation) and handled to LLVM.</p>
<p>LLVM does a lot more of optimizations and generates the assembler and binary code that later is linked into the final object.</p>
<p>If you want to learn more about the compilation stages, check <a href="https://rustc-dev-guide.rust-lang.org/overview.html">this article</a>.</p>
<h1 id="reducing-compile-times">Reducing compile times</h1>
<h2 id="the-toy-project">The toy project</h2>
<p>In order to show how to optimize compiling times, we are going to use a toy project that consist in one library crate and 40 separate binaries that use the library. You may ask yourself: What kind of project has that structure?! It could be a server-less project containing several cloud functions (like AWS Lambdas) that share functionality through some library crates or some project that consist in several binaries (like <a href="https://es.wikipedia.org/wiki/GNU_Core_Utilities">GNU Core utilities</a>).</p>
<h2 id="how-i-get-the-timings">How I get the timings</h2>
<p>The timings found on this posts are the last timing returned by cargo after running 10 times the same compilation, always doing <code>cargo clean</code> before executing <code>cargo build [...]</code>. I compile the project 10 times to verify that <em>on average</em> the compilation times are more or less the same.</p>
<h2 id="initial-compile-times">Initial compile times</h2>
<p>Here are the individual compile times for the toy project. This and further compilations were done in Debian 12, with an i7-6700K and 16GB DDR4 2600Mhz Ram <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<p><img loading="lazy" src="/images/accelerating_compile_times/1.png#center" alt="image.png"  />
</p>
<p>The total time was</p>
<pre tabindex="0"><code>Finished `release` profile [optimized] target(s) in 25.30s
</code></pre><p>And the size of the binaries is about 3.5MB:</p>
<pre tabindex="0"><code>ls -l --block-size=KB ./target/release
total 143262kB
-rwxr-xr-x  2 nico nico 3489kB Sep 16 15:03 bin1
-rwxr-xr-x  2 nico nico 3489kB Sep 16 15:03 bin10
-rw-r--r--  1 nico nico    1kB Sep 16 15:04 bin10.d
-rwxr-xr-x  2 nico nico 3489kB Sep 16 15:03 bin11
-rw-r--r--  1 nico nico    1kB Sep 16 15:04 bin11.d
-rwxr-xr-x  2 nico nico 3489kB Sep 16 15:03 bin12
-rw-r--r--  1 nico nico    1kB Sep 16 15:04 bin12.d
-rwxr-xr-x  2 nico nico 3489kB Sep 16 15:03 bin13
</code></pre><p>The command used was <code>cargo build --release --timings</code>. You can check the source code of the toy project <a href="https://github.com/nicoan/compile_times_blogpost/tree/initial-stage">here</a>.</p>
<h2 id="removing-unnecessary-dependencies">Removing unnecessary dependencies</h2>
<p>It is common that in a project, the people involved usually forget about removing old dependencies. This happens because when projects are large, it is hard to know if a dependency is not used anymore. Luckily, we can use the <code>-Wunused-crate-dependencies</code> flag that tells us which dependencies are not being used by the crates inside the project. If we compile with <code>RUSTFLAGS=-Wunused-crate-dependencies cargo build --release --timings</code> we get the following output:</p>
<pre tabindex="0"><code>...
warning: external crate `actix` unused in `lib1`: remove the dependency or add `use actix as _;`
  |
  = note: requested on the command line with `-W unused-crate-dependencies`

warning: external crate `serde_json` unused in `lib1`: remove the dependency or add `use serde_json as _;`

warning: external crate `tokio` unused in `lib1`: remove the dependency or add `use tokio as _;`

warning: `lib1` (lib) generated 3 warnings
</code></pre><p>By removing the unused dependencies reported by the warnings, we reduced the <em>total</em> compilation time a little:</p>
<pre tabindex="0"><code>Finished `release` profile [optimized] target(s) in 23.85s
</code></pre><p>It is not much, but by not compiling those dependencies, we gained around 1.x seconds! To keep our project clean, we can use this flag in our CI/CD pipeline to warn us when we forget to remove an old dependency.</p>
<p>You can find the modifications made in this section <a href="https://github.com/nicoan/compile_times_blogpost/tree/1-rm-unused-deps">here</a>.</p>
<h2 id="removing-unnecessary-derives">Removing unnecessary derives</h2>
<p>Macros create valid Rust code that then has to be parsed, transformed, validated and optimized. It may happen that you need to derive some trait, not because is used by productive code but is used by test code. It does not make sense to process that code in release builds.</p>
<p>A nice “trick” to avoid processing that code in release builds is to derive it behind a <a href="https://doc.rust-lang.org/cargo/reference/features.html">cargo feature</a> and only activate that feature in the <code>[dev-dependencies]</code> section of the <code>Cargo.toml</code>. The  <code>Cargo.toml</code> from <code>lib1</code> was changed this way:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">package</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;lib1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">version</span> = <span style="color:#e6db74">&#34;0.1.0&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">edition</span> = <span style="color:#e6db74">&#34;2021&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">dependencies</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mockall</span> = { <span style="color:#a6e22e">workspace</span> = <span style="color:#66d9ef">true</span>, <span style="color:#a6e22e">optional</span> = <span style="color:#66d9ef">true</span> }
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">reqwest</span> = { <span style="color:#a6e22e">workspace</span> = <span style="color:#66d9ef">true</span> }
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">serde</span> =  { <span style="color:#a6e22e">workspace</span> = <span style="color:#66d9ef">true</span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">features</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tests</span> = [<span style="color:#e6db74">&#34;dep:mockall&#34;</span>]
</span></span></code></pre></div><p>And we put behind the <code>tests</code> feature, all the code we do not need in production <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[cfg_attr(feature = </span><span style="color:#e6db74">&#34;tests&#34;</span><span style="color:#75715e">, mockall::automock)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">trait</span> Trait1 {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">fn1</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">fn2</span>(a: <span style="color:#66d9ef">u16</span>) -&gt; String;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">fn3</span>(a: String) -&gt; <span style="color:#66d9ef">u16</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[derive(Serialize, Default)]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[cfg_attr(feature = </span><span style="color:#e6db74">&#34;tests&#34;</span><span style="color:#75715e">, derive(Deserialize, PartialEq, Eq, Debug))]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Struct1</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> f1: <span style="color:#66d9ef">u8</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> f2: String,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> f3: <span style="color:#a6e22e">HashMap</span><span style="color:#f92672">&lt;</span>String, String<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> f4: <span style="color:#a6e22e">HashSet</span><span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> f5: Vec<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[derive(Deserialize, Default)]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[cfg_attr(feature = </span><span style="color:#e6db74">&#34;tests&#34;</span><span style="color:#75715e">, derive(Serialize, PartialEq, Eq, Debug))]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Struct9</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> f1: <span style="color:#66d9ef">u8</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> f2: String,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> f3: <span style="color:#a6e22e">HashMap</span><span style="color:#f92672">&lt;</span>String, String<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> f4: <span style="color:#a6e22e">HashSet</span><span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> f5: Vec<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Activating the feature will work for both unit and integration tests. Here are the compilation times after introducing the flag:</p>
<p><img loading="lazy" src="/images/accelerating_compile_times/2.png#center" alt="image.png"  />
</p>
<p>And the total time:</p>
<pre tabindex="0"><code>Finished release profile [optimized] target(s) in 21.58s
</code></pre><p>By reducing the code generated by the derives and <code>automock</code> macros, Rust have less code to translate to intermediate representation (light blue), code to generate (purple) and optimize. The time reduction was <strong>huge</strong>, from an average of 4.x seconds to an average of 0.3 seconds.</p>
<p>The take-home lesson here is: do not take the auto generation of code. If you don’t need it in the production build, do not compile it.</p>
<p>You can find the modifications made in this section <a href="https://github.com/nicoan/compile_times_blogpost/tree/2-rm-unused-derives">here</a>.</p>
<h2 id="dynamic-linking-1">Dynamic Linking</h2>
<p>Until now, the code contained in <code>lib1</code> is statically linked to all the binaries in our project. Instead of repeating the code in every binary, we can use dynamic linking to have <code>lib1</code> as a shared object, allowing the binaries to use the code without the need of having it embedded.</p>
<p>With dynamic linking we will not only achieve faster compile times, we will also get smaller binaries and, if there’s a bug in the library, we can fix it and deploy the shared object without the need of modifying the binaries (as long as we use the same Rust version used to compile the binaries).</p>
<p>To activate dynamic linking, we need to add to the <code>lib1</code>&rsquo;s <code>Cargo.toml</code> the following lines at the end:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">lib</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">crate-type</span> = [<span style="color:#e6db74">&#34;dylib&#34;</span>]
</span></span></code></pre></div><p>And compile ithe project t with: <code>RUSTFLAGS=&quot;-C prefer-dynamic&quot; cargo build --release --timings</code>. Here are the compilation times with dynamic linking:</p>
<p><img loading="lazy" src="/images/accelerating_compile_times/3.png#center" alt="image.png"  />
</p>
<p>The compilation times for <code>lib1</code> increased <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>, but for binaries times reduced from an average of 0.8x to an average of 0.3x! They were also reduced in size: from 3489 kB to 12 kB!</p>
<pre tabindex="0"><code>ls -l --block-size=KB ./target/release
total 7238kB
-rwxr-xr-x  2 nico nico   12kB Sep 16 14:43 bin1
-rwxr-xr-x  2 nico nico   12kB Sep 16 14:43 bin10
-rw-r--r--  1 nico nico    1kB Sep 16 14:43 bin10.d
-rwxr-xr-x  2 nico nico   12kB Sep 16 14:43 bin11
-rw-r--r--  1 nico nico    1kB Sep 16 14:43 bin11.d
-rwxr-xr-x  2 nico nico   12kB Sep 16 14:43 bin12
...
drwxr-xr-x  2 nico nico    5kB Sep 16 14:43 incremental
-rw-r--r--  1 nico nico    1kB Sep 16 14:43 liblib1.d
-rwxr-xr-x  2 nico nico 6555kB Sep 16 14:43 liblib1.so
</code></pre><p>The total time was</p>
<pre tabindex="0"><code>Finished `release` profile [optimized] target(s) in 19.74s
</code></pre><p>If we check the libraries needed for any of our binaries, we are going to see a dependency with <code>liblib1.so</code>. <code>ldd</code> outputs &ldquo;not found&rdquo; because the shared object is located in the target directory at the moment of running the command and not in the usual paths where shared objects can be found (<code>/lib</code>, <code>/usr/lib</code> , <code>/usr/local/lib</code>) or in any of the paths listed in the <code>LD_LIBRARY_PATH</code> environment variable.</p>
<pre tabindex="0"><code>$ ldd ./target/release/bin1
        linux-vdso.so.1 (0x00007ffe573aa000)
        liblib1.so =&gt; not found
        libstd-52417a9a08ba8fb9.so =&gt; not found
        libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fc19594a000)
        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc195769000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fc195986000)
</code></pre><p>You can find the modifications made in this section <a href="https://github.com/nicoan/compile_times_blogpost/tree/3-dynamic-linking">here</a>.</p>
<h2 id="cache-dependencies">Cache dependencies</h2>
<p>Most of the total compilation time was taken by the the project&rsquo;s dependencies. In this section we are going to explore two ways those dependencies can be cached so we avoid recompiling them every time we build it. This is specially useful in a continuous integration/deployment environment, where we are constantly compiling the project but the dependencies rarely change.</p>
<h3 id="sccache">sccache</h3>
<p><a href="https://github.com/mozilla/sccache">sccache</a> is a tool developed by Mozilla. It can be used with several compilers, not only rustc. It works as a wrapper of the compiler, chaching compiled things locally on disk and avoiding recompiling them if possible.</p>
<p>To install it, we can run:</p>
<pre tabindex="0"><code>$ cargo install sccache
</code></pre><p>Then, we can use it by wrapping the <code>rustc</code> compiler with the <code>RUSTC_WRAPPER</code> environment variable:</p>
<pre tabindex="0"><code>$ RUSTC_WRAPPER=sccache RUSTFLAGS=&#34;-C prefer-dynamic&#34; cargo build --release --timings
</code></pre><p>We compiled the project with the dynamic linking activated. The first compilation took around 23 seconds, 3.x seconds more than last compilation but, in the first one, <code>sccache</code> was caching the compiled dependencies. After running <code>cargo clean</code> and recompiling the project again we get:</p>
<pre tabindex="0"><code>Finished `release` profile [optimized] target(s) in 6.54s
</code></pre><p>So, we dropped from an average of 19.x seconds to an average of 6.5x seconds!</p>
<h3 id="cargo-chef">Cargo Chef</h3>
<p><a href="https://crates.io/crates/cargo-chef/">cargo-chef</a> is an awesome tool created by <a href="https://www.lpalmieri.com/">Luca Palmieri</a>. It is designed to speed up compilation times when using containers to build the project. Basically, what it does under the hood is locate all the entry points of our workspace either for libs (<code>lib.rs</code>) or binaries (<code>main.rs</code>), remove all the code from them, leave some trivial code like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {}
</span></span></code></pre></div><p>and compile the project. In other words, it avoids compiling the source code from the project. It just compiles the dependencies to cache them. In future compilations, the dependencies will be already cached, so only the project’s business logic will be compiled.</p>
<p><a href="https://crates.io/crates/cargo-chef/0.1.68#user-content-how-to-use">As stated in the official documentation</a> and in a warning if you try to use it locally, this is designed to be used with containers because it leverages on the Docker&rsquo;s layer cache mechanism to work. <strong>It is not recommended</strong> using it to compile the project locally.</p>
<p>For demonstration purposes, I modified the Dockerfile suggested in the official cargo chef documentation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> lukemathwalker/cargo-chef:latest-rust-1 AS chef</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> chef AS planner</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> cargo chef prepare --recipe-path recipe.json<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> chef AS builder</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>planner /app/recipe.json recipe.json<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Build dependencies - this is the caching Docker layer!</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> CARGO_TARGET_DIR<span style="color:#f92672">=</span>/app/cache RUSTFLAGS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;-C prefer-dynamic&#34;</span> cargo chef cook --release --workspace --recipe-path recipe.json<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/bin/sh&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>The image produced from this Dockerfile will contain all the project dependencies already cached in <code>/app/cache</code> directory. It is <strong>very important</strong> to use cargo chef with exactly the same configuration you are going to use to compile the project. Since we are using the dynamic linking branch for the demonstration, we must include the  <code>RUSTFLAGS=&quot;-C prefer-dynamic&quot;</code> flag.</p>
<p>Here are the steps I followed:</p>
<ol>
<li>Build the image: <code>docker build --tag chef .</code></li>
<li>Enter the container: <code>docker run -it chef</code></li>
<li>Compile the project: <code>CARGO_TARGET_DIR=/app/cache RUSTFLAGS=&quot;-C prefer-dynamic&quot; cargo build --release --workspace</code>.</li>
</ol>
<p>The total compilation time is:</p>
<pre tabindex="0"><code>Finished `release` profile [optimized] target(s) in 2.64s
</code></pre><p>We’ve just compiled the <em>whole project</em> in 2.64s! This is a massive time reduction!</p>
<h1 id="summary">Summary</h1>
<p>We started our compile time reduction journey with static linked binaries with a size of 3489kB and a total compilation time of 25.x seconds and we finished it with dynamically linked binaries with a size of 12kB and a total compilation time of 2.x seconds:</p>
<table>
  <thead>
      <tr>
          <th>Modification</th>
          <th>Total time</th>
          <th>% Time reduction from original</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Original codebase</td>
          <td>25.3s</td>
          <td>0%</td>
      </tr>
      <tr>
          <td>Remove unused dependencies</td>
          <td>23.85s</td>
          <td>5.73%</td>
      </tr>
      <tr>
          <td>Remove unnecesary derives</td>
          <td>21.58s</td>
          <td>14.70%</td>
      </tr>
      <tr>
          <td>Dynamic Linking</td>
          <td>19.74s</td>
          <td>21.98%</td>
      </tr>
      <tr>
          <td>Dynamic Linking + sccache</td>
          <td>6.54s</td>
          <td>75.15%</td>
      </tr>
      <tr>
          <td>Dynamic Linking + cargo chef</td>
          <td>2.64s</td>
          <td>89.57%</td>
      </tr>
  </tbody>
</table>
<p>It is important to remember that all the steps include the modifications from the previous steps, with the exception of the caches, that use the dynamic linking branch but sccache and cargo chef are used separately.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Sometimes when we are working on projects, deadlines are tight, product team need to release new features and we need to choose wisely on what we spend our time. If we are lucky enough to be in a team that saves time to work on technical debt, we should really use that oportunity to make the structural changes needed in the project to reduce the compilation times. This may sound obvious but not everyone agrees on what is important to solve first.</p>
<p>When projects are small, compilation times are usually small or tolerable, so we don’t pay much attention. As it grows, compilation times may become a real bottleneck for development (imagine that deploying a new version to a <code>dev</code> environment takes an hour).</p>
<p>Taking care of the compilation will save the whole team a lot of time and headaches, enabling everyone to develop, test and deploy faster.</p>
<h1 id="resources">Resources</h1>
<ul>
<li><a href="https://zicklag.github.io/rust-tutorials/rust-plugins.html">Learn how to setup dynamically loadable plugins for your Rust app</a></li>
<li><a href="https://doc.rust-lang.org/reference/linkage.html">Rust’s official Linkage page</a></li>
<li><a href="https://blog.pnkfx.org/blog/2022/05/12/linking-rust-crates/">Linking Rust crates series</a></li>
<li><a href="https://nnethercote.github.io/perf-book/build-configuration.html#minimizing-compile-times">Minimizing Compile Times</a></li>
<li><a href="https://robert.kra.hn/posts/2022-09-09-speeding-up-incremental-rust-compilation-with-dylibs/">Speeding up incremental Rust compilation with dylibs</a></li>
<li><a href="https://doc.rust-lang.org/cargo/guide/build-cache.html">Build cache</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>There’s a mode that we can use to avoid recompiling the library to match the Rust version we are currently using:  <code>cdylib</code> . This mode will produce a dynamic linked library that can be used by other programming languages (and of course, also by Rust). The code compiled with this configuration will follow the C ABI (ordering, size, alignment of fields, etc…) enabling the possibility of directly linking the shared library with a C/C++ program or creating the bindings to use it in another language. The problem with this configuration and Rust is that using the shared object is not straightforward thanks to the C ABI. In another article I will explore this way and show how you can use a Rust library in other languages.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Compilations are quite fast because there&rsquo;s not much code. It is enough to show the compilation times improvements.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>You may ask yourself why I used a feature flag and <code>#[cfg_attr(feature = &quot;tests&quot;, ...)]</code> instead of plain <code>#[cfg(test)]</code>. With <code>#[cfg(test)]</code>, only the current crate would be able to see things under that configuration, or in other words, we would not be able to use the things behind that configuration in the unit and integration tests of the binaries.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>I am not sure why the codegen section (purple) disappeared from the graph and why it took almost the double to compile it. I made the modifications described here in some real world projects and the timings certainly did not doubled for the library crates.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Fast data verification in the blockchain: The Merkle Tree</title>
      <link>https://nicoan.net/posts/merkle_tree/</link>
      <pubDate>Thu, 30 May 2024 12:00:00 -0300</pubDate>
      <guid>https://nicoan.net/posts/merkle_tree/</guid>
      <description>&lt;p&gt;The bitcoin network has been running non-stop since 2009 and at the time of writing this blog post, the whole blockchain occupies &lt;a href=&#34;https://news.bitcoin.com/bitcoin-blockchain-surpasses-half-terabyte-amid-soaring-transactions-and-increased-block-capacity/&#34;&gt;more than 500GB&lt;/a&gt;. Verifying information in that huge amount of data is not an easy task. Luckily, as many other computer science problems, this can be solved by using the correct data structure. In our case, that data structure is the Merkle tree.&lt;/p&gt;
&lt;h1 id=&#34;what-is-a-merkle-tree-aka-hash-tree&#34;&gt;What is a Merkle Tree (a.k.a Hash Tree)?&lt;/h1&gt;
&lt;p&gt;As the name suggests, the Merkle tree is a data structure in form of a tree (usually binary) where:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>The bitcoin network has been running non-stop since 2009 and at the time of writing this blog post, the whole blockchain occupies <a href="https://news.bitcoin.com/bitcoin-blockchain-surpasses-half-terabyte-amid-soaring-transactions-and-increased-block-capacity/">more than 500GB</a>. Verifying information in that huge amount of data is not an easy task. Luckily, as many other computer science problems, this can be solved by using the correct data structure. In our case, that data structure is the Merkle tree.</p>
<h1 id="what-is-a-merkle-tree-aka-hash-tree">What is a Merkle Tree (a.k.a Hash Tree)?</h1>
<p>As the name suggests, the Merkle tree is a data structure in form of a tree (usually binary) where:</p>
<ul>
<li>Each leaf contains a <a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">hashed</a> piece of information we want to save and later on verify.</li>
<li>Each internal node contains the hash of its two children.</li>
</ul>
<p><img loading="lazy" src="/images/merkle_trees/merkle_1.png#center" alt="Merkle 1"  />
</p>
<h1 id="what-and-where-are-they-used-for">What and where are they used for?</h1>
<p>The Merkle Tree usage transcends the blockchain space:</p>
<ul>
<li>
<p><strong>Git version control system</strong>: Git stores everything as a blob (for files) or a tree (for directories, that are also Merkle trees), creating a Merkle tree of the whole project directory. Each blob and tree is part of the outermost tree, meaning that they have assigned a unique hash.</p>
<p>By representing all the project structure in a Merkle tree, Git is able to quickly evaluate which files were changed by comparing hashes and, with this information, make diffs, pull and push operations more efficient by only performing them on the files that changed.</p>
</li>
<li>
<p><strong>AWS DynamoDB</strong>: A high-performance NoSQL key-value store developed by Amazon, it uses Merkle trees to detect inconsistencies between replicas and minimize the amount of transferred data.</p>
</li>
<li>
<p><strong>BitTorrent protocol:</strong> BitTorrent is a famous peer-to-peer file sharing protocol that uses Merkle Trees for verifying the integrity of the data being downloaded.</p>
<p>The data is divided into chunks of equal size and then each chunk is hashed. After that a Merkle tree is calculated from the data hashes and the root is included in the torrent file.</p>
<p>Integrity of data pieces can be verified by calculating their hash and constructing the merkle path all the way up to the root. If the constructed root is different from the original contained in the torrent file, then we can be sure that that piece of data is corrupted and the protocol can efficiently download that chunk again.</p>
<p>This is still a <a href="http://bittorrent.org/beps/bep_0030.html">draft proposal</a>.</p>
</li>
</ul>
<p>In this article we will focus on the Blockchain use cases.</p>
<h1 id="how-is-it-used-in-blockchain">How is it used in Blockchain?</h1>
<p>In the <a href="https://bitcoin.org/bitcoin.pdf">Bitcoin whitepaper</a>, Merkle trees are used in several places to solve different problems. Before talking about how Merkle trees are used in Bitcoin, first we need to know how a Bitcoin’s block is composed</p>
<p>A block contains a list of all the transactions included in that block.Transactions in a Bitcoin’s block are <a href="https://developer.bitcoin.org/reference/block_chain.html#merkle-trees">sorted in an specific order and using their transaction id, a Merkle tree from all the transactions contained in that block is generated</a>. It also contains a header with some useful information about the block itself such as block version, transaction’s Merkle tree root, etc. You can check all the fields <a href="https://developer.bitcoin.org/reference/block_chain.html">here</a>.</p>
<p>Blocks are uniquely identified through their block hash. The block hash is nothing else than the block header hashed twice with the SHA256 hash function. It is important to remember that the previous block hash is included in the block header and that is what creates the chain.</p>
<h3 id="data-integrity-and-immutability">Data Integrity and Immutability</h3>
<p>As we have seen, the transactions’s Merkle tree root and the previous block hash is included in all the chain’s blocks.</p>
<p><img loading="lazy" src="/images/merkle_trees/merkle_2.png#center" alt="Merkle 2"  />
</p>
<p>Imagine now that a malicious actor tries to change the <em>n</em>’th block of the chain by changing a transaction contained in it. Every transaction has a unique transaction hash, so, the malicious transaction will have a different transaction hash than the original:</p>
<p><img loading="lazy" src="/images/merkle_trees/merkle_3.png#center" alt="Merkle 3"  />
</p>
<p>This alteration will cause the intermediate nodes and the root to change, resulting in the block header and block hash changing as well. Since the <em>(n+1)th</em> block uses the previous block hash to calculate its own hash, and the previous hash has changed, new block hashes must be recalculated <strong>for all</strong> subsequent blocks.</p>
<p>This is a very complicated thing to accomplish for two reasons:</p>
<ul>
<li>Computing a single block hash takes around 10 minutes: Block hashes should have a certain number of zeros at the beginning. This is done by searching for a particular value for the <em>nonce</em> field in the header. If the Merkle root changes, there is a very, very low probability that recomputing the same block hash with the same nonce will be a hash that fulfills the condition of having a certain amount of zeros at the beginning, and, if this happened, there is an even lower probability that <strong>all</strong> the next blocks won’t need to change the <em>nonce</em>.</li>
<li>You’ll need to overpower the network to convince honest nodes that the modified chain is the real one. This is known as <a href="https://bitcoinwiki.org/wiki/51-attack">the 51% attack</a>.</li>
</ul>
<p>As a result, blocks in a blockchain are immutable.</p>
<h3 id="simplified-payment-verification">Simplified Payment Verification</h3>
<p>By using Merkle Trees, payment verifications can be made in a more efficient way. A verifier can run a node that does not save all the transactions, just the block headers. To verify that a payment was made, it needs to verify that the transaction that backs up that payment is contained in some block of the chain.</p>
<p>Imagine we need to verify that <em>Tx 6</em> is present in a block. The first thing to do is to retrieve from a <em>full node</em> the block where the transaction is located and some specific nodes (marked in green), known as “Merkle path”<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> from the Merkle tree. After that the verifier can compute the Merkle branch of <em>Tx 6</em> (marked in blue) up to the root and validate that the transaction is included in the block <em>n</em>.</p>
<p><img loading="lazy" src="/images/merkle_trees/merkle_4.png#center" alt="Merkle 4"  />
</p>
<p>The whole verification process is very fast to compute and uses very little data, saves up disk space, and eliminates the need of transferring large amounts of data.</p>
<p><strong>NOTE</strong>: Ethereum widely uses a variation of the Merkle Tree known as Patricia Merkle Trie. Check <a href="https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/">this</a> for more information.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Although the Merkle tree is a simple data structure, its simplicity doesn&rsquo;t make it any less powerful. Using simple yet clever solutions is one of the reasons that makes computer science a beautiful discipline.</p>
<p>If you ever find yourself in a situation where you need to verify data integrity or identify where data has changed, a Merkle tree is a good and efficient candidate that can help solve that problem.</p>
<p>Blockchain space is full of these kinds of solutions and many more will come in the future, let’s not forget that we are at the beginning of this journey and new applications for this technology are yet to be discovered. There is space for introducing clever solutions in those yet-to-be-discovered new applications!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The Merkle path is the minimum number of nodes required to calculate the root hash.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Rust references and borrowing from the inside</title>
      <link>https://nicoan.net/posts/references_and_borrowing/</link>
      <pubDate>Sun, 24 Mar 2024 12:00:00 -0300</pubDate>
      <guid>https://nicoan.net/posts/references_and_borrowing/</guid>
      <description>&lt;p&gt;Now it is time to talk about references and borrowing. To understand this topic, first check out this &lt;a href=&#34;https://nicoan.net/posts/move_semantics&#34;&gt;post&lt;/a&gt; where I talk about ownership and move semantics. As we have seen in the named article, the way Rust manages memory allocations is rather unique. This is also true when we talk about referencing some place in the memory, something that can be achieved in C with pointers.&lt;/p&gt;
&lt;h1 id=&#34;gdb&#34;&gt;GDB&lt;/h1&gt;
&lt;p&gt;In this post I am going to explore what is happening in memory using the &lt;a href=&#34;https://en.wikipedia.org/wiki/GNU_Debugger&#34;&gt;GNU Debugger (gdb)&lt;/a&gt; with the special command &lt;code&gt;rust-gdb&lt;/code&gt;:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Now it is time to talk about references and borrowing. To understand this topic, first check out this <a href="/posts/move_semantics">post</a> where I talk about ownership and move semantics. As we have seen in the named article, the way Rust manages memory allocations is rather unique. This is also true when we talk about referencing some place in the memory, something that can be achieved in C with pointers.</p>
<h1 id="gdb">GDB</h1>
<p>In this post I am going to explore what is happening in memory using the <a href="https://en.wikipedia.org/wiki/GNU_Debugger">GNU Debugger (gdb)</a> with the special command <code>rust-gdb</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ rust-gdb ./target/debug/references_and_borrowing
</span></span></code></pre></div><h1 id="what-is-a-reference-in-rust">What is a reference in Rust?</h1>
<p>A reference is a value that points to data in memory. Although it is similar to a classic pointer there is a crucial difference between the two: a reference is guaranteed to always point to a memory address that contains a valid piece of data whereas pointers are not¹. The checks performed to guarantee that a reference is always valid is done at <strong>compile time</strong>.</p>
<p>Consider the following code:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Create a new value, with s1 as owner
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> s1 <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;hello world!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Create a reference of s1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> s2 <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>s1;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Print the s2 value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, s2);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>This code compiles and runs correctly. What happens in memory? Let’s check it out with GDB!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Breakpoint 1, references_and_borrowing::main <span style="color:#f92672">()</span> at src/main.rs:3
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>           let s1 <span style="color:#f92672">=</span> String::from<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;hello world!&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> n
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5</span>           let s2 <span style="color:#f92672">=</span> &amp;s1;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> n
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">8</span>           println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{}&#34;</span>, s2<span style="color:#f92672">)</span>;
</span></span></code></pre></div><p>At this point, the <code>String</code> <code>s1</code> is initialized with the text <code>&quot;hello world!</code> and the <code>s1</code>&rsquo;s reference named <code>s2</code> is set. Let&rsquo;s check the stack:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>0x7fffffffd920: <span style="color:#ae81ff">56</span>      <span style="color:#ae81ff">217</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd928: <span style="color:#ae81ff">112</span>     <span style="color:#ae81ff">251</span>     <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd930: <span style="color:#ae81ff">32</span>      <span style="color:#ae81ff">208</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">247</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd938: <span style="color:#ae81ff">160</span>     <span style="color:#ae81ff">251</span>     <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd940: <span style="color:#ae81ff">12</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd948: <span style="color:#ae81ff">12</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd950: <span style="color:#ae81ff">56</span>      <span style="color:#ae81ff">217</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd958: <span style="color:#ae81ff">128</span>     <span style="color:#ae81ff">167</span>     <span style="color:#ae81ff">218</span>     <span style="color:#ae81ff">247</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd960: <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd968: <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The lines 4 to 6 is the representation of s1 in the stack: <code>0x7fffffffd938</code> is <strong><code>ptr</code></strong>, <code>0x7fffffffd940</code> is <strong><code>len</code></strong> and <code>0x7fffffffd948</code> is <strong><code>capacity</code></strong>. The reference to <code>s1</code> is located at <code>0x7fffffffd950</code>. Let&rsquo;s print the address value in hexadecimal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffd950
</span></span><span style="display:flex;"><span>0x7fffffffd950: 0x00007fffffffd938
</span></span></code></pre></div><p>As we can see, the value contained in the address <code>0x7fffffffd950</code> is <code>0x00007fffffffd938</code>², the beginning of the <code>s1</code>&rsquo;s stack representation!</p>
<p><img loading="lazy" src="/images/references_and_borrowing/reference.png#center" alt="Reference in memory"  />
</p>
<p>¹ An invalid memory region refers to a region that was not assigned to our process or memory that was valid at some point of the program execution but then was freed. <br>
² Zeroes are trimmed for legibility when printed as a memory address by GDB.</p>
<h2 id="the-two-rules-of-references">The two rules of references</h2>
<p>As everything in Rust, references have their own set of rules.</p>
<ol>
<li>References are always valid.</li>
<li>At any given time we either have any number of immutable references or one mutable reference.</li>
</ol>
<h3 id="references-are-always-valid">References are always valid</h3>
<p>There&rsquo;s no way of testing this rule at runtime (or at least I don&rsquo;t know one). As I stated earlier in this post, references are guaranteed to always be valid and this validation is done at compile time.</p>
<h3 id="at-any-given-time-we-either-have-any-number-of-immutable-references-or-one-mutable-reference">At any given time we either have any number of immutable references or one mutable reference</h3>
<p>At first glance, this rule feels like an unnecessary limitation but thanks to it we are able to catch hidden bugs in our code because <a href="https://en.wikipedia.org/wiki/Race_condition#Data_race">data races</a> are avoided at compile time.</p>
<p>A classic example is the one where we have <code>n</code> mutable references of the same piece of numeric data that represents a counter, all in different threads. The only thing the threads do is increment the counter. References by themselves do not have a synchronization mechanism. This is the concurrent counter problem, <a href="https://knowledgebasement.com/what-are-concurrency-problems-and-how-to-avoid-them-in-java/">here&rsquo;s the whole explanation and an example code in Java</a>. This can&rsquo;t happen in Rust (code won&rsquo;t compile) since we need some kind of <a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html">synchronization mechanism</a> to mutate the same piece of data in different threads.</p>
<p>This is not the only problem this rule keeps us away from! In fact, we don&rsquo;t even need concurrency, it can avoid bugs in simpler situations. Consider the following code in python:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">insert_even_zeros</span>(vec):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (n,i) <span style="color:#f92672">in</span> enumerate(vec):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> n <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            vec<span style="color:#f92672">.</span>insert(i, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vec <span style="color:#f92672">=</span> list(range(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">7</span>)) <span style="color:#75715e"># [1, 2, 3, 4, 5, 6]</span>
</span></span><span style="display:flex;"><span>print(vec)
</span></span></code></pre></td></tr></table>
</div>
</div><p>What we are trying to do here is to insert a <code>0</code> at the index of a value, if the value is an even number. The expected result for the input <code>[1, 2, 3, 4, 5, 6]</code> is <code>[1, 0, 2, 3, 0, 4, 5, 0, 6]</code> but if we run it, we get <code>[1, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6]</code>. What is happening? The source of the problem resides in the fact that we are mutating the vector while iterating it:</p>
<ol>
<li>We start at index <code>0</code> where the value <code>1</code> is located, since <code>1</code> is not even we continue to index <code>1</code>.</li>
<li>At index <code>1</code> we find value <code>2</code>. It is even so we insert a <code>0</code> at index <code>1</code>. Now the array is: <code>[1, 0, 2, 3, 4, 5, 6]</code>. We continue to index <code>2</code>.</li>
<li>At index <code>2</code> we find the value <code>2</code> again, because it was moved from its original position in the previous iteration. It is even so we insert a <code>0</code> at index <code>2</code>. Now the array is: <code>[1, 0, 0, 2, 3, 4, 5, 6]</code>.</li>
<li>This process is repeated 4 more times since the array length is 6 and how many iterations are going to be executed is calculated at the beginning of the <code>for</code> statement.</li>
</ol>
<p>This is known as the <em>iterator invalidation</em> problem.</p>
<p>What happens in Rust?</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">insert_even_zeros</span>(vec: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">mut</span> Vec<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span><span style="color:#f92672">&gt;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (i, n) <span style="color:#66d9ef">in</span> vec.iter().enumerate() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> n <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>            vec.insert(i, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> v: Vec<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span><span style="color:#f92672">..=</span><span style="color:#ae81ff">6</span>).collect(); <span style="color:#75715e">// [1, 2, 3, 4, 5, 6]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    insert_even_zeros(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> v);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>We get a compilation error that enforces the rule!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>error<span style="color:#f92672">[</span>E0502<span style="color:#f92672">]</span>: cannot borrow <span style="color:#e6db74">`</span>*vec<span style="color:#e6db74">`</span> as mutable because it is also borrowed as immutable
</span></span><span style="display:flex;"><span> --&gt; src/main.rs:4:13
</span></span><span style="display:flex;"><span>  |
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> |     <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>i, n<span style="color:#f92672">)</span> in vec.iter<span style="color:#f92672">()</span>.enumerate<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  |                   ----------------------
</span></span><span style="display:flex;"><span>  |                   |
</span></span><span style="display:flex; background-color:#3c3d38"><span>  |                   immutable borrow occurs here
</span></span><span style="display:flex; background-color:#3c3d38"><span>  |                   immutable borrow later used here
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span> |         <span style="color:#66d9ef">if</span> n % 2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span> |             vec.insert<span style="color:#f92672">(</span>i, 0<span style="color:#f92672">)</span>;
</span></span><span style="display:flex; background-color:#3c3d38"><span>  |             ^^^^^^^^^^^^^^^^ mutable borrow occurs here
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For more information about this error, try <span style="color:#e6db74">`</span>rustc --explain E0502<span style="color:#e6db74">`</span>.
</span></span></code></pre></div><p>Where are the mutable and immutable references? In the vector&rsquo;s function signatures:</p>
<ul>
<li><a href="https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter"><code>.iter()</code></a> takes an immutable reference of the vector (<code>&amp;self</code>):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">iter</span>(<span style="color:#f92672">&amp;</span>self) -&gt; <span style="color:#a6e22e">Iter</span><span style="color:#f92672">&lt;</span>&#39;_, T<span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><ul>
<li><a href="https://doc.rust-lang.org/std/vec/struct.Vec.html#method.insert"><code>.insert()</code></a> takes a mutable reference of the vector (<code>&amp;mut self</code>):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">insert</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self, index: <span style="color:#66d9ef">usize</span>, element: <span style="color:#a6e22e">T</span>)
</span></span></code></pre></div><p>Does this mean that there&rsquo;s no way of modifying a vector in Rust while iterating it? No! You can do it:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> v: Vec<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span><span style="color:#f92672">..=</span><span style="color:#ae81ff">6</span>).collect();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> i: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex; background-color:#3c3d38"><span>    <span style="color:#66d9ef">let</span> v_len <span style="color:#f92672">=</span> v.len();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> i <span style="color:#f92672">&lt;</span> v_len {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> v[i] <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex; background-color:#3c3d38"><span>            v.insert(i, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>We also have two references, one immutable (<code>len</code> function) and one mutable (<code>insert</code> function). Why does it work? Because the scope of the immutable reference that is in <code>len</code> ends right after it the function is used (the scope of a reference begins at its creation and extends until the last time the reference is used).</p>
<p>Notice that the error message we got with the <code>for</code> loop says &ldquo;<code>immutable borrow occurs here</code>&rdquo; and &ldquo;<code>immutable borrow later used here</code>&rdquo;. Both errors come from the same place, the <code>iter()</code> function, where the immutable reference is used.</p>
<p>Does it make sense for a programming language to have these kinds of rules if it is possible to write code to circumvent them? Yes! The way the last code is written is rather &ldquo;unnatural&rdquo;. Most of the time Rust will catch bugs at compile time thanks to these rules.</p>
<h1 id="borrowing">Borrowing</h1>
<p>There are times when you don&rsquo;t want a specific scope to lose ownership of a value. There could be several reasons for that, for example, you need to reuse the value. Consider the following code:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hello</span>(s: String) {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;hello </span><span style="color:#e6db74">{s}</span><span style="color:#e6db74">.&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">bye</span>(s: String) {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;bye </span><span style="color:#e6db74">{s}</span><span style="color:#e6db74">.&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> s <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;fellow blog reader&#34;</span>);
</span></span><span style="display:flex;"><span>    hello(s);
</span></span><span style="display:flex;"><span>    bye(s);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>This code won&rsquo;t compile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>error<span style="color:#f92672">[</span>E0382<span style="color:#f92672">]</span>: use of moved value: <span style="color:#e6db74">`</span>s<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>  --&gt; src/main.rs:12:9
</span></span><span style="display:flex;"><span>   |
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10</span> |     let s <span style="color:#f92672">=</span> String::from<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;fellow blog reader&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>   |         - move occurs because <span style="color:#e6db74">`</span>s<span style="color:#e6db74">`</span> has type <span style="color:#e6db74">`</span>String<span style="color:#e6db74">`</span>, which does not implement the <span style="color:#e6db74">`</span>Copy<span style="color:#e6db74">`</span> trait
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span> |     hello<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>   |           - value moved here
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">12</span> |     bye<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>   |         ^ value used here after move
</span></span><span style="display:flex;"><span>   |
</span></span><span style="display:flex;"><span>note: consider changing this parameter type in <span style="color:#66d9ef">function</span> <span style="color:#e6db74">`</span>hello<span style="color:#e6db74">`</span> to borrow instead <span style="color:#66d9ef">if</span> owning the value isn<span style="color:#960050;background-color:#1e0010">&#39;</span>t necessary
</span></span><span style="display:flex;"><span>  --&gt; src/main.rs:1:13
</span></span><span style="display:flex;"><span>   |
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>  | fn hello<span style="color:#f92672">(</span>s: String<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>   |    -----    ^^^^^^ this parameter takes ownership of the value
</span></span><span style="display:flex;"><span>   |    |
</span></span><span style="display:flex;"><span>   |    in this <span style="color:#66d9ef">function</span>
</span></span><span style="display:flex;"><span>help: consider cloning the value <span style="color:#66d9ef">if</span> the performance cost is acceptable
</span></span><span style="display:flex;"><span>   |
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span> |     hello<span style="color:#f92672">(</span>s.clone<span style="color:#f92672">())</span>;
</span></span><span style="display:flex;"><span>   |            ++++++++
</span></span></code></pre></div><p>Here we have a similar situation as we had <a href="/posts/move_semantics/#rule-2-theres-only-one-owner-per-value">here</a>. As the compiler error says, we are moving <code>s</code> into <code>hello</code>, so when we try to use it in <code>bye</code> we get the <a href="https://doc.rust-lang.org/error_codes/E0382.html">&ldquo;use after move&rdquo;</a> error. How can we solve this?</p>
<h3 id="solution-1-duplicating-the-value">Solution 1: Duplicating the value</h3>
<p>We can do as the compiler says, and <a href="https://doc.rust-lang.org/std/clone/trait.Clone.html">clone</a> the value. This way, both functions get a separate copy of the value that they can own:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hello</span>(s: String) {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;hello </span><span style="color:#e6db74">{s}</span><span style="color:#e6db74">.&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">bye</span>(s: String) {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;bye </span><span style="color:#e6db74">{s}</span><span style="color:#e6db74">.&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> s <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;fellow blog reader&#34;</span>);
</span></span><span style="display:flex; background-color:#3c3d38"><span>    hello(s.clone());
</span></span><span style="display:flex;"><span>    bye(s);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>This works! the code compiles and executes without a warning. Is this a good solution? No.</p>
<p>We don&rsquo;t really need to duplicate <code>s</code> since we are only reading it to print it out. This solution does a lot of extra work by duplicating <code>s</code>&rsquo;s value in memory.</p>
<h3 id="solution-2-returning-the-ownership-back-to-the-caller">Solution 2: Returning the ownership back to the caller</h3>
<p>Instead of duplicating <code>s</code>&rsquo;s value, we can return the ownership to the caller, so it can use it again:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-rust" data-lang="rust"><span style="display:flex; background-color:#3c3d38"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hello</span>(s: String) -&gt; String {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;hello </span><span style="color:#e6db74">{s}</span><span style="color:#e6db74">.&#34;</span>);
</span></span><span style="display:flex; background-color:#3c3d38"><span>    s
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">bye</span>(s: String) {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;bye </span><span style="color:#e6db74">{s}</span><span style="color:#e6db74">.&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> s <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;fellow blog reader&#34;</span>);
</span></span><span style="display:flex; background-color:#3c3d38"><span>    <span style="color:#66d9ef">let</span> s2 <span style="color:#f92672">=</span> hello(s);
</span></span><span style="display:flex; background-color:#3c3d38"><span>    bye(s2);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>This also works! the code compiles and executes without a warning. Is this a good solution? Also no.</p>
<p>Passing ownership back and forth functions is not a very comfortable and idiomatic way of doing things. On top of that, the function signatures are not semantically accurate. The signature of <code>hello</code> suggests that we pass an <code>String</code> value and returns back another <code>String</code> value. By just looking at it, it is hard to understand what the function intends to do and it does not make sense to return anything if the only objective of the function is only to print something.</p>
<h3 id="solution-3-borrowing">Solution 3: Borrowing</h3>
<p>We need to keep the ownership of <code>s</code> in the scope of the <code>main</code> function, we don&rsquo;t want to duplicate values and we don&rsquo;t want to move the values back and forth either. What can we do? use <a href="#what-is-a-reference-in-rust">a reference</a>!</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hello</span>(s: <span style="color:#66d9ef">&amp;</span>String) {
</span></span><span style="display:flex; background-color:#3c3d38"><span>    println!(<span style="color:#e6db74">&#34;hello </span><span style="color:#e6db74">{s}</span><span style="color:#e6db74">.&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex; background-color:#3c3d38"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">bye</span>(s: <span style="color:#66d9ef">&amp;</span>String) {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;bye </span><span style="color:#e6db74">{s}</span><span style="color:#e6db74">.&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> s <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;fellow blog reader&#34;</span>);
</span></span><span style="display:flex; background-color:#3c3d38"><span>    hello(<span style="color:#f92672">&amp;</span>s);
</span></span><span style="display:flex; background-color:#3c3d38"><span>    bye(<span style="color:#f92672">&amp;</span>s);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>The code compiles and executes without a warning. Is this a good solution? Yes.</p>
<p>Given that we only need to read the value, we don&rsquo;t want to move it or duplicate it, using a reference is the best solution. Also, it is more idiomatic and semantically correct. By looking at the function&rsquo;s signatures we know that they do not need to own any value and they will not return any result from the operation they are performing.</p>
<p>Let&rsquo;s now check what is happening in the memory with GDB:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Breakpoint 1, references_and_borrowing::main <span style="color:#f92672">()</span> at src/main.rs:10
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10</span>          let s <span style="color:#f92672">=</span> String::from<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;fellow blog reader&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> n
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span>          hello<span style="color:#f92672">(</span>&amp;s<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/80ub $sp
</span></span><span style="display:flex;"><span>0x7fffffffd970: <span style="color:#ae81ff">2</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd978: <span style="color:#ae81ff">128</span>     <span style="color:#ae81ff">217</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd980: <span style="color:#ae81ff">160</span>     <span style="color:#ae81ff">251</span>     <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd988: <span style="color:#ae81ff">18</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd990: <span style="color:#ae81ff">18</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd998: <span style="color:#ae81ff">48</span>      <span style="color:#ae81ff">251</span>     <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9a0: <span style="color:#ae81ff">1</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9a8: <span style="color:#ae81ff">59</span>      <span style="color:#ae81ff">216</span>     <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9b0: <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">240</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9b8: <span style="color:#ae81ff">48</span>      <span style="color:#ae81ff">251</span>     <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Looks like our <code>String</code> representation in the stack starts at <code>0x7fffffffd980</code>. Let&rsquo;s confirm it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffd980
</span></span><span style="display:flex;"><span>0x7fffffffd980: 0x00005555555afba0
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/18c 0x00005555555afba0
</span></span><span style="display:flex;"><span>0x5555555afba0: <span style="color:#ae81ff">102</span> <span style="color:#e6db74">&#39;f&#39;</span> <span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span> <span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span> <span style="color:#ae81ff">111</span> <span style="color:#e6db74">&#39;o&#39;</span> <span style="color:#ae81ff">119</span> <span style="color:#e6db74">&#39;w&#39;</span> <span style="color:#ae81ff">32</span> <span style="color:#e6db74">&#39; &#39;</span>  <span style="color:#ae81ff">98</span> <span style="color:#e6db74">&#39;b&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555afba8: <span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span> <span style="color:#ae81ff">111</span> <span style="color:#e6db74">&#39;o&#39;</span> <span style="color:#ae81ff">103</span> <span style="color:#e6db74">&#39;g&#39;</span> <span style="color:#ae81ff">32</span> <span style="color:#e6db74">&#39; &#39;</span>  <span style="color:#ae81ff">114</span> <span style="color:#e6db74">&#39;r&#39;</span> <span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#ae81ff">97</span> <span style="color:#e6db74">&#39;a&#39;</span>  <span style="color:#ae81ff">100</span> <span style="color:#e6db74">&#39;d&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555afbb0: <span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#ae81ff">114</span> <span style="color:#e6db74">&#39;r&#39;</span>
</span></span></code></pre></div><p>Excellent, now let&rsquo;s continue with the program execution and check what&rsquo;s in <code>hello</code> function&rsquo;s stack:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Breakpoint 2, references_and_borrowing::hello <span style="color:#f92672">(</span>s<span style="color:#f92672">=</span>0x7fffffffd980<span style="color:#f92672">)</span> at src/main.rs:2
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>           println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;hello {s}.&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/80ub $sp
</span></span><span style="display:flex;"><span>0x7fffffffd900: <span style="color:#ae81ff">128</span>     <span style="color:#ae81ff">217</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd908: <span style="color:#ae81ff">140</span>     <span style="color:#ae81ff">201</span>     <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd910: <span style="color:#ae81ff">32</span>      <span style="color:#ae81ff">208</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">247</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd918: <span style="color:#ae81ff">128</span>     <span style="color:#ae81ff">217</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd920: <span style="color:#ae81ff">128</span>     <span style="color:#ae81ff">217</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd928: <span style="color:#ae81ff">154</span>     <span style="color:#ae81ff">177</span>     <span style="color:#ae81ff">222</span>     <span style="color:#ae81ff">247</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd930: <span style="color:#ae81ff">160</span>     <span style="color:#ae81ff">251</span>     <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd938: <span style="color:#ae81ff">18</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd940: <span style="color:#ae81ff">18</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd948: <span style="color:#ae81ff">213</span>     <span style="color:#ae81ff">192</span>     <span style="color:#ae81ff">89</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffd920
</span></span><span style="display:flex;"><span>0x7fffffffd920: 0x00007fffffffd980
</span></span></code></pre></td></tr></table>
</div>
</div><p>At <code>0x7fffffffd920</code> found a pointer pointing to <code>s</code> in <code>main</code>&rsquo;s stack (<code>0x7fffffffd920: 0x00007fffffffd980</code>)! We can confirm that the whole representation still belongs to <code>main</code>&rsquo;s scope and, in <code>hello</code> and <code>bye</code> functions, we are just referencing it. <code>s</code>memory will be freed once <code>main</code> finishes.</p>
<p><img loading="lazy" src="/images/references_and_borrowing/s_string.png#center" alt="Borrowing in memory"  />
</p>
<p>There&rsquo;s no need to change the scope to borrow a value: the <a href="#what-is-a-reference-in-rust">code used in the previous section</a>, is just a slight modification of an <a href="/posts/move_semantics/#rule-2-theres-only-one-owner-per-value">example used in a previous post</a> that did not compile. We fixed it by borrowing <code>s1</code>&rsquo;s value to <code>s2</code>.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Sometimes we have a hard time fighting the Rust compiler because it usually fails with errors that do not exist in other programming languages. Those errors feel arbitrary but, as we have seen in this post, they are there to protect us. It can take some time to wrap your head around them.</p>
<p>The more you code in Rust, the less you fight with the compiler and you end up with more performant and more secure programs. Also, a lot of errors are caught at compile time, saving us a lot of precious debugging time.</p>
<p>This post concludes a series of post about how Rust handles memory the internals of it:</p>
<ol>
<li><a href="/posts/stack_and_heap">Stack and Heap</a></li>
<li><a href="/posts/move_semantics">Rust ownership and move semantics from the inside</a></li>
<li><a href="/posts/references_and_borrowing">Rust references and borrowing from the inside</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Seed Phrase vs Private Key: a technical overview</title>
      <link>https://nicoan.net/posts/seed_phrase_vs_private_key/</link>
      <pubDate>Mon, 04 Dec 2023 12:00:00 -0300</pubDate>
      <guid>https://nicoan.net/posts/seed_phrase_vs_private_key/</guid>
      <description>&lt;p&gt;Seed phrase and private key are two terms that are tightly related but are different things. When setting up a new crypto wallet such as Metamask, Ledger or Trezor, among others, a list of 12 or 24 common words is given to the user to back up. That list is the so-called seed phrase, an “easy to remember, easy to backup” word list.&lt;/p&gt;
&lt;p&gt;A private key is a large binary string used by a crypto wallet for signing the transactions that later will be sent to the chain.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Seed phrase and private key are two terms that are tightly related but are different things. When setting up a new crypto wallet such as Metamask, Ledger or Trezor, among others, a list of 12 or 24 common words is given to the user to back up. That list is the so-called seed phrase, an “easy to remember, easy to backup” word list.</p>
<p>A private key is a large binary string used by a crypto wallet for signing the transactions that later will be sent to the chain.</p>
<p>In this article we are going to take a journey from the generation of the seed phrase to the multiple wallet address generation, making a special stop at the private key creation and paying attention to the technical details of this process.</p>
<h2 id="how-is-the-seed-phrase-generated-the-bip39-proposal">How is the seed phrase generated? The BIP39 proposal</h2>
<p>BIP stands for <strong>B</strong>itcoin <strong>I</strong>mprovement <strong>P</strong>roposal. They are documents that describe a proposal for improving the Bitcoin blockchain ecosystem. <a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki">BIP39</a> is called “Mnemonic code for generating deterministic keys” and describes the process of generating the mnemonic code. Here’s how it is
done:</p>
<p><img loading="lazy" src="/images/seed_phrase_private_key/sp_pk_1.png#center" alt="Seed Phrase vs Private Key 1"  />
</p>
<p>The words are taken from a word list that is available in <a href="https://github.com/bitcoin/bips/tree/master/bip-0039">several languages</a>. The length of the list is always 2048 (2048 = 2¹¹, the number of bits used for grouping ENT + CS).</p>
<p>The quantity of words produced depends on the amount of entropy bits (ENT – the randomness factor of the initial seed). Typically the lengths used are 128 bits, leading to 12 words, and 256 bits, resulting in 24 words.</p>
<h2 id="how-is-the-private-key-generated">How is the private key generated?</h2>
<h3 id="binary-seed">Binary seed</h3>
<p>Once the mnemonic seed phrase is obtained, numerous private keys can be generated from it. That is why wallets such as Metamask and Trezor are able to generate any number of accounts needed with only one seed phrase.</p>
<p>To generate the private keys from the seed phrase, the initial step involves computing a binary seed derived from the mnemonic. This computation uses the key stretching algorithm PBKDF2 with HMAC-SHA512, where the seed phrase is concatenated with the string “mnemonic” and a
password utilized as a salt. In instances where no password is utilized, only the term “mnemonic” is appended.</p>
<p><img loading="lazy" src="/images/seed_phrase_private_key/sp_pk_2.png#center" alt="Seed Phrase vs Private Key 2"  />
</p>
<p>Employing PBKDF2 increases the time and computational power needed for brute-force attacks, rendering it highly impractical to utilize this approach for cracking a seed phrase.</p>
<p>It is worth mentioning that this process and the seed phrase generation are completely separated processes. This process can be used with a mnemonic seed generated from a totally different process.</p>
<h3 id="private-keys">Private keys</h3>
<p>Now it is time to use the binary seed to generate private keys (and from those, public keys and wallet addresses). The following process describes what it is known as a HD Wallet (Hierarchical Deterministic Wallet). First we need to create a Master Private Key, a Master Public
Key and a Master Chain Code from the Binary seed:</p>
<p><img loading="lazy" src="/images/seed_phrase_private_key/sp_pk_3.png#center" alt="Seed Phrase vs Private Key 3"  />
</p>
<p>From this derivation we will produce all the accounts we need in a deterministic way. To create new accounts, we require:</p>
<ul>
<li>Either the Master Private Key or the Master Public Key.</li>
<li>The Master Chain Code: this will be used as a source of entropy.</li>
<li>A 32 bit integer number used as index.</li>
</ul>
<p><img loading="lazy" src="/images/seed_phrase_private_key/sp_pk_4.png#center" alt="Seed Phrase vs Private Key 4"  />
</p>
<p>In the diagram above we used the Master Private Key, but as said earlier we can also use the Master Public Key. The difference between using one or the order is generating a Hardened Key or a Normal Key, but that is out of the scope of this article.</p>
<p>We can create a virtually limitless quantity of private keys with this method either by changing the index or using a Child Key as a Master Key and repeat the process. This way we can have a tree of
private keys.</p>
<h2 id="gluing-it-all-together">Gluing it all together</h2>
<p>We saw how a seed phrase is generated, used to generate a binary seed that then is used to generate a Master Private Key. This Master Private Key allows us to generate multiple Child Private Keys.</p>
<p>Public Keys and Wallet addresses are derived from Child Private Keys. It is a chain of derivation:</p>
<p><img loading="lazy" src="/images/seed_phrase_private_key/sp_pk_5.png#center" alt="Seed Phrase vs Private Key 5"  />
</p>
<p>Does this mean that I always need a seed phrase to generate private keys? No! In fact, at the beginning of the blockchain era, all private keys were created individually.</p>
<h2 id="security">Security</h2>
<p>Is it worth trying to guess a seed phrase? Imagine that your seed phrase is composed of only one word of the word list. This means that the attacker has to try only 2048 combinations to derive your private key and steal all your assets. Suppose that deriving a private key with a specific combination takes 1 millisecond, then, it would take around 2 seconds to test all the possibilities!</p>
<p>Imagine now that your seed phrase is composed of two words of the word list. This means that the attacker has to try 2048 x 2048 = 2048² = 4194304 combinations to derive your private key. Assuming the 1-millisecond scenario, it would take the attacker around 1 hour and 10
minutes to test all the possibilities. That is a lot more!</p>
<p>Let’s repeat the process but now with 12 words. This means the attacker has to try 2048¹² = 5444517870735015415413993718908291383296 combinations. It would take around 2048¹²÷1000÷60÷60÷24÷365 ≈ 172644529132896227023528466479 years.</p>
<h2 id="conclusion">Conclusion</h2>
<p>We saw the main difference between seed phrase vs private key, how it helps to keep your assets safe (by saving a phrase instead of a very long easy to forget number).</p>
<p>Are we at the end of the road? It doesn’t seem to be the case, even though this is a huge improvement on how wallets are created, managed and recovered it is still not enough to enable massive adoption of the crypto ecosystem. There are currently a lot of efforts to make the
crypto space more user friendly. A proof of that is Ethereum’s ERC-4337, known as “account abstraction” that will, among other things, allow the user to use standard methods of authentication such as fingerprint instead of having to store a mnemonic phrase.</p>
<p>The crypto space traveled a long distance to be where it is today, but there’s still a lot ahead that needs to be explored, new methods to develop and new things to be discovered. In my opinion, this is just the beginning of this amazing trip. Even though mnemonic phrases are the
way-to-go today, it is worth paying attention to the new solutions that arise from the community. One or many of those new ideas will help to on-board the next generation of users and allow the mass adoption of this amazing technology.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Zero-Knowledge Proofs Decoded: A Simple Intro</title>
      <link>https://nicoan.net/posts/zero_knowledge_proofs_decoded/</link>
      <pubDate>Mon, 15 May 2023 12:00:00 -0300</pubDate>
      <guid>https://nicoan.net/posts/zero_knowledge_proofs_decoded/</guid>
      <description>&lt;p&gt;It’s common to hear about web3 initiatives incorporating or aiming to incorporate ZK-proofs for increased privacy. The notion of Zero Knowledge proof (ZK-proof) is not a modern concept; it was first introduced in a paper named &lt;a href=&#34;http://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Proof%20Systems/The_Knowledge_Complexity_Of_Interactive_Proof_Systems.pdf&#34;&gt;“The Knowledge Complexity of Interactive Proof-Systems”&lt;/a&gt; in 1985. In this article we will see what a ZK-proof is, offer an intuitive explanation and explore several use cases.&lt;/p&gt;
&lt;p&gt;Whether you are a developer or a user, it’s important to understand the core concept behind ZK-Proofs because it will help you understand not only what the product is trying to achieve in matters of security and privacy but also how they are trying to achieve them.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>It’s common to hear about web3 initiatives incorporating or aiming to incorporate ZK-proofs for increased privacy. The notion of Zero Knowledge proof (ZK-proof) is not a modern concept; it was first introduced in a paper named <a href="http://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Proof%20Systems/The_Knowledge_Complexity_Of_Interactive_Proof_Systems.pdf">“The Knowledge Complexity of Interactive Proof-Systems”</a> in 1985. In this article we will see what a ZK-proof is, offer an intuitive explanation and explore several use cases.</p>
<p>Whether you are a developer or a user, it’s important to understand the core concept behind ZK-Proofs because it will help you understand not only what the product is trying to achieve in matters of security and privacy but also how they are trying to achieve them.</p>
<h2 id="what-is-a-zero-knowledge-proof">What is a Zero-Knowledge Proof?</h2>
<p>ZK-Proof is protocol that involves a Prover and a Verifier and enables the Prover to demonstrate the truth of a statement to the Verifier without disclosing any additional information beyond the
veracity of the statement. Essentially, it allows the Prover to prove to the Verifier that they possess knowledge of a specific piece of information, without disclosing it.</p>
<h2 id="how-does-it-work-an-intuitive-explanation">How does it work? An intuitive explanation</h2>
<p>The Ali Baba cave is a well-known story used to give an intuitive explanation of how the ZK-Proof protocol works. This story is based in a circular cave with one entrance and a magic door opened by a password located in the middle of it. It involves two actors, Bob the verifier and Alice the Prover.</p>
<p>Alice wants to prove to Bob that she knows the password that opens the door placed inside the cave without telling him the word itself. To do that they follows three simple steps:</p>
<p><img loading="lazy" src="/images/zk_intro/zk_1.png#center" alt="Ali Baba cave 1"  />
</p>
<ol>
<li>Alice chooses a random path to enter the cave while Bob waits outside without looking at her.</li>
<li>Bob goes to the entrance of the cave and screams a path.</li>
<li>Alice returns to the entrance using the path that Bob screamed in step 2.</li>
</ol>
<p>If Bob screams A, and Alice returns using A it can mean two things: either Alice entered the cave through B and knows the password or entered through A and cheated. After all, there is a 50% chance of getting it right.</p>
<p><img loading="lazy" src="/images/zk_intro/zk_2.png#center" alt="Ali Baba cave 2"  />
</p>
<p>The key is to iterate this process until it becomes highly improbable for Alice to have cheated in every repetition, given that each time Alice is correct, the probability of cheating is halved.</p>
<h2 id="where-can-we-apply-zk-proofs">Where can we apply ZK-Proofs?</h2>
<p>Any scenario where someone needs to demonstrate the validity of some statement without giving up the information that validates it is suitable. In web3, ZK-Proofs can enhance privacy.  For instance, they can be used to anonymize transactions between peers, as done in the <a href="https://z.cash/technology/">ZCash</a> z-address to z-address transactions, or to enable anonymous voting for decentralized autonomous organizations (<a href="https://en.wikipedia.org/wiki/Decentralized_autonomous_organization">DAOs</a>).</p>
<p>Given the fact that the ZK-Profs are a general cryptography concept, applications can also be found for web2: financial institutions could leverage ZK-Proofs to demonstrate that a person’s income falls within a specific range, without disclosing the precise income amount or  or as a
proof of identity, demonstrating that the possession a valid government issued document, without giving it up.</p>
<p>ZK-Proofs are perfect for this kind of scenario because they can provide strong privacy guarantees without compromising the integrity of the data managed by the system.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Zero-Knowledge proofs have the potential to make the web3 space a more private and safer environment for the users. But as Uncle Ben said in the best Spider-Man movie: “with great power comes great responsibility”. We can’t ignore the fact that these tools can also be
used by bad actors to perform illicit activities such as money laundering and illegal transactions. As we continue to develop and apply this technology, it is crucial to consider methods for combating its
misuse without sacrificing its benefits. As web3 enthusiasts and developers this can’t be ignored and should be discussed along with the development of ZK-Proof based solutions.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rust ownership and move semantics from the inside</title>
      <link>https://nicoan.net/posts/move_semantics/</link>
      <pubDate>Tue, 18 Oct 2022 12:00:00 -0300</pubDate>
      <guid>https://nicoan.net/posts/move_semantics/</guid>
      <description>&lt;p&gt;Ownership and move semantics is one of the things that makes Rust unique. To understand this topic, you need to understand what Stack and Heap are at a basic level. I wrote a &lt;a href=&#34;https://nicoan.net/posts/stack_and_heap&#34;&gt;post&lt;/a&gt; about that! You can check it out if you need a refresher on those concepts. It is a little bit hard to get used to this feature because it forces you to think about stuff that you didn&amp;rsquo;t have to worry about in other languages. Enough introduction, let&amp;rsquo;s cut to the chase!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Ownership and move semantics is one of the things that makes Rust unique. To understand this topic, you need to understand what Stack and Heap are at a basic level. I wrote a <a href="/posts/stack_and_heap">post</a> about that! You can check it out if you need a refresher on those concepts. It is a little bit hard to get used to this feature because it forces you to think about stuff that you didn&rsquo;t have to worry about in other languages. Enough introduction, let&rsquo;s cut to the chase!</p>
<h1 id="gdb">GDB</h1>
<p>In this post, I am going to explore what is happening in memory using the <a href="https://en.wikipedia.org/wiki/GNU_Debugger">GNU Debugger (gdb)</a> with the special command <code>rust-gdb</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ rust-gdb ./target/debug/move_semantics
</span></span></code></pre></div><p>I am going to use the <a href="https://visualgdb.com/gdbreference/commands/x">x command</a> a lot to explore the stack and the <code>$sp</code> value (refers to the Stack Pointer).</p>
<h1 id="the-three-rules-of-ownership">The three rules of ownership</h1>
<p>There are three rules that governs the ownership system:</p>
<ol>
<li><strong>Every initialized value has an owner</strong>: Every initialized value has a variable that is its owner.¹</li>
<li><strong>There is only <em>one</em> owner per value</strong>: You can&rsquo;t have two or more variables that owns <em>the same</em> value in memory. You can&rsquo;t share ownership between variables.²</li>
<li><strong>If a variable&rsquo;s scope ends, its value gets freed</strong>: When a scope ends, all values owned by variables contained in that scope get automatically freed.</li>
</ol>
<p>¹ But not every variable owns a value, they may just hold a reference. I&rsquo;ll talk about this in the &ldquo;References and Borrowing&rdquo; article. <br>
² Actually you can have more than one owner in safe Rust. You have to use special structures, such as <a href="https://doc.rust-lang.org/stable/std/rc/struct.Rc.html">Rc</a> (multiple owners do not own the value directly though).</p>
<p>Let&rsquo;s test the rules! But before that, a little reminder of how the <code>String</code> type is represented in memory:</p>
<p><img loading="lazy" src="/images/move_semantics/string_repr.png#center" alt="String representation in memory"  />
</p>
<p>where:</p>
<ul>
<li><strong>ptr</strong>: A pointer to the first direction of the Heap containing the string itself (in this case <code>hello</code>).</li>
<li><strong>len</strong>: How much memory, in bytes, the contents of the string is currently using.</li>
<li><strong>capacity</strong>: The total amount of memory, in bytes, allocated for that string.</li>
</ul>
<h2 id="rule-1-every-initialized-value-has-an-owner">Rule 1: Every initialized value has an owner.</h2>
<p>Consider the following code:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hello_world</span>() -&gt; <span style="color:#66d9ef">u32</span> {
</span></span><span style="display:flex;"><span>    String::from(<span style="color:#e6db74">&#34;hello! I am a free initialized String!&#34;</span>);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">42</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    hello_world();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>In the <code>hello_world</code> function, we have an initialized String  value that is free (not assigned to a variable). Did Rust initialize the value in memory or just ignore it? We can&rsquo;t use it so&hellip; Why would Rust save it? Let&rsquo;s check what happens! When we compile this code we get the following warning:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>warning: unused <span style="color:#66d9ef">return</span> value of <span style="color:#e6db74">`</span>from<span style="color:#e6db74">`</span> that must be used
</span></span><span style="display:flex;"><span> --&gt; src/main.rs:2:5
</span></span><span style="display:flex;"><span>  |
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> |     String::from<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;hello! I am a free initialized String!&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
</span></span><span style="display:flex;"><span>  |
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">=</span> note: <span style="color:#e6db74">`</span><span style="color:#75715e">#[warn(unused_must_use)]` on by default</span>
</span></span></code></pre></div><p>Rust warns us that we must use the returned value of the <code>String::from</code> function, otherwise, we can&rsquo;t access it in any way. What happens in memory? Let&rsquo;s check it out with GDB!</p>
<p>First, we set a breakpoint at the beginning of the <code>hello_world</code> function and execute the <code>String</code> initialization:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Breakpoint 1, move_semantics::hello_world <span style="color:#f92672">()</span> at src/main.rs:2
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>           String::from<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;hello! I am a free initialized String!&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> n
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>           println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{}&#34;</span>, 42<span style="color:#f92672">)</span>;
</span></span></code></pre></div><p>At this point, the <code>String</code> is initialized, but it isn&rsquo;t assigned to a variable. So, it has no owner! Let&rsquo;s check the stack:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/80ub $sp
</span></span><span style="display:flex;"><span>0x7fffffffd980: <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">240</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd988: <span style="color:#ae81ff">61</span>      <span style="color:#ae81ff">60</span>      <span style="color:#ae81ff">87</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd990: <span style="color:#ae81ff">16</span>      <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd998: <span style="color:#ae81ff">38</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd9a0: <span style="color:#ae81ff">38</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9a8: <span style="color:#ae81ff">2</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9b0: <span style="color:#ae81ff">48</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9b8: <span style="color:#ae81ff">96</span>      <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9c0: <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">240</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9c8: <span style="color:#ae81ff">5</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It seems that the <code>String</code> value is there, lines 4 to 6 looks like our initialized value: memory addresses <code>0x7fffffffd998</code> and <code>0x7fffffffd9a0</code> (lines 5 and 6) have a 38 stored, and the string happens to have 38 characters. <code>0x7fffffffd990</code> (line 4) must be the Heap address where the actual text is allocated! Let&rsquo;s see what&rsquo;s inside that memory address.</p>
<p>First, print the address as hexa:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffd990
</span></span><span style="display:flex;"><span>0x7fffffffd990:	0x00005555555a5a10
</span></span></code></pre></div><p>Then, explore what&rsquo;s inside that address!</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/38cb 0x00005555555a5a10
</span></span><span style="display:flex;"><span>0x5555555a5a10: <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5a18: <span style="color:#ae81ff">16</span> <span style="color:#e6db74">&#39;\020&#39;</span>       <span style="color:#ae81ff">80</span> <span style="color:#e6db74">&#39;P&#39;</span>  <span style="color:#ae81ff">90</span> <span style="color:#e6db74">&#39;Z&#39;</span>  <span style="color:#ae81ff">85</span> <span style="color:#e6db74">&#39;U&#39;</span>  <span style="color:#ae81ff">85</span> <span style="color:#e6db74">&#39;U&#39;</span>  <span style="color:#ae81ff">85</span> <span style="color:#e6db74">&#39;U&#39;</span>  <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5a20: <span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#ae81ff">32</span> <span style="color:#e6db74">&#39; &#39;</span>  <span style="color:#ae81ff">105</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#ae81ff">110</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#ae81ff">105</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#ae81ff">116</span> <span style="color:#e6db74">&#39;t&#39;</span> <span style="color:#ae81ff">105</span> <span style="color:#e6db74">&#39;i&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5a28: <span style="color:#ae81ff">97</span> <span style="color:#e6db74">&#39;a&#39;</span>  <span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span> <span style="color:#ae81ff">105</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#ae81ff">122</span> <span style="color:#e6db74">&#39;z&#39;</span> <span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#ae81ff">100</span> <span style="color:#e6db74">&#39;d&#39;</span> <span style="color:#ae81ff">32</span> <span style="color:#e6db74">&#39; &#39;</span>  <span style="color:#ae81ff">83</span> <span style="color:#e6db74">&#39;S&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5a30: <span style="color:#ae81ff">116</span> <span style="color:#e6db74">&#39;t&#39;</span> <span style="color:#ae81ff">114</span> <span style="color:#e6db74">&#39;r&#39;</span> <span style="color:#ae81ff">105</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#ae81ff">110</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#ae81ff">103</span> <span style="color:#e6db74">&#39;g&#39;</span> <span style="color:#ae81ff">33</span> <span style="color:#e6db74">&#39;!&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Our <code>String</code> is <strong>mostly</strong> there! But, it appears that the beginning of it was overwritten. It&rsquo;s ok, that value isn&rsquo;t owned by any variable; we can&rsquo;t access it. So, it doesn&rsquo;t matter what happens to it.</p>
<p><strong>NOTE</strong>: This memory exploration was done using a <em>debug</em> build. I am not really sure what happens if this code was compiled in <em>release</em> mode. I believe that Rust does not initialize the value as an optimization, because it is not used.</p>
<h2 id="rule-2-theres-only-one-owner-per-value">Rule 2: There&rsquo;s only one owner per value</h2>
<p>Consider the following code:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Create a new value, with s1 as owner
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> s1 <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;hello world!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Move ownership from s1 to s2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> s2 <span style="color:#f92672">=</span> s1;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Oops! compiler error, the value has been moved!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, s1);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>When we try to compile this, we get:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>error<span style="color:#f92672">[</span>E0382<span style="color:#f92672">]</span>: borrow of moved value: <span style="color:#e6db74">`</span>s1<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> --&gt; src/main.rs:7:20
</span></span><span style="display:flex;"><span>  |
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span> |     let s1 <span style="color:#f92672">=</span> String::from<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;hello world!&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>  |         -- move occurs because <span style="color:#e6db74">`</span>s1<span style="color:#e6db74">`</span> has type <span style="color:#e6db74">`</span>String<span style="color:#e6db74">`</span>, which does not implement the <span style="color:#e6db74">`</span>Copy<span style="color:#e6db74">`</span> trait
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span> |     // Move ownership from s1 to s2
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5</span> |     let s2 <span style="color:#f92672">=</span> s1;
</span></span><span style="display:flex;"><span>  |              -- value moved here
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">6</span> |     // Oops! compiler error, the value has been moved!
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7</span> |     println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{}&#34;</span>, s1<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>  |                    ^^ value borrowed here after move
</span></span></code></pre></div><p>What is happening here is that the ownership of the <code>String</code> <code>&quot;hello world!&quot;</code> is transferred from <code>s1</code> to <code>s2</code>. Because of that, the compiler invalidates the access to <code>s1</code>.</p>
<p>The value was moved because the type <code>String</code> does not implement the <a href="https://doc.rust-lang.org/std/marker/trait.Copy.html">Copy</a> trait. This is used on types that can be <em>fully</em> allocated in the stack and can be duplicated by simply copying bits without much overload (duplicating data in the Heap is much more complicated). When a type implements the <code>Copy</code> trait, instead of having &ldquo;move semantics&rdquo; it has &ldquo;copy semantics&rdquo;. This is usually the case for primitive types:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> n1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">42</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> n2 <span style="color:#f92672">=</span> n1;
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, n1);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, n1, n2);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>If we run this code&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cargo run
</span></span><span style="display:flex;"><span>   Compiling move_semantics v0.1.0 <span style="color:#f92672">(</span>/home/rust/blog<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    Finished dev <span style="color:#f92672">[</span>unoptimized + debuginfo<span style="color:#f92672">]</span> target<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span> in 0.30s
</span></span><span style="display:flex;"><span>     Running <span style="color:#e6db74">`</span>target/debug/move_semantics<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">42</span> <span style="color:#ae81ff">42</span>
</span></span></code></pre></div><p>compiles! Because the value <code>42</code> is copied!</p>
<h2 id="rule-3-if-a-variables-scope-ends-its-value-gets-freed">Rule 3: If a variable&rsquo;s scope ends its value gets freed</h2>
<p>Consider the following code:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Create a new value with s1 as owner
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> s1 <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;hello world!&#34;</span>);
</span></span><span style="display:flex;"><span>    } <span style="color:#75715e">// s1 gets dropped here! since is the end of the scope
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Checking drop with gdb!&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>s1</code> allocation will have been freed when we reach line 7. This is because the curly braces at the beginning of the <code>main</code> function creates a new scope. Once the code reaches the end of it, all the variables that it contained get dropped. Let&rsquo;s check it out in GDB:</p>
<p>On line 4, we can find <code>s1</code> in the locals variables of the scope:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Breakpoint 1, move_semantics::main <span style="color:#f92672">()</span> at src/main.rs:4
</span></span><span style="display:flex;"><span>4	        println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{}&#34;</span>, s1<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info locals
</span></span><span style="display:flex;"><span>s1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello world!&#34;</span>
</span></span></code></pre></div><p>Let&rsquo;s check where the Heap allocation of <code>s1</code> is and what value it contains (remember that the first field of the Stack representation is the pointer to the Heap):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p &amp;s1
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>*mut alloc::string::String<span style="color:#f92672">)</span> 0x7fffffffd960
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffd960
</span></span><span style="display:flex;"><span>0x7fffffffd960:	0x00005555555a5ad0
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/12c 0x00005555555a5ad0
</span></span><span style="display:flex;"><span>0x5555555a5ad0:	<span style="color:#ae81ff">104</span> <span style="color:#e6db74">&#39;h&#39;</span>	<span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">111</span> <span style="color:#e6db74">&#39;o&#39;</span>	<span style="color:#ae81ff">32</span> <span style="color:#e6db74">&#39; &#39;</span>	<span style="color:#ae81ff">119</span> <span style="color:#e6db74">&#39;w&#39;</span>	<span style="color:#ae81ff">111</span> <span style="color:#e6db74">&#39;o&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5ad8:	<span style="color:#ae81ff">114</span> <span style="color:#e6db74">&#39;r&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">100</span> <span style="color:#e6db74">&#39;d&#39;</span>	<span style="color:#ae81ff">33</span> <span style="color:#e6db74">&#39;!&#39;</span>
</span></span></code></pre></div><p>But when the scope finishes&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>7	    println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Checking drop with gdb!&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info locals
</span></span><span style="display:flex;"><span>No locals.
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/12c 0x00005555555a5ad0
</span></span><span style="display:flex;"><span>0x5555555a5ad0:	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5ad8:	<span style="color:#ae81ff">16</span> <span style="color:#e6db74">&#39;\020&#39;</span>	<span style="color:#ae81ff">80</span> <span style="color:#e6db74">&#39;P&#39;</span>	<span style="color:#ae81ff">90</span> <span style="color:#e6db74">&#39;Z&#39;</span>	<span style="color:#ae81ff">85</span> <span style="color:#e6db74">&#39;U&#39;</span>
</span></span></code></pre></div><p>All the locals variables were dropped and the memory occupied by them freed! That part of the Heap is now filled with something else (probably garbage).</p>
<h1 id="moving-a-value-what-happens-under-the-hood">Moving a value: What happens under the hood?</h1>
<p>Consider the following code:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">move_stack_example</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Create a new String value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> s1 <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;hello world!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Move it from s1 to s2 (s2 takes ownership)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> s2 <span style="color:#f92672">=</span> s1;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, s2);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    move_stack_example();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>When we move a value, it does not dissapears from the memory, instead, whatever is in the stack that belongs to the moved value gets duplicated and the compiler just forbids us from accessing the old variable ever again.</p>
<p><img loading="lazy" src="/images/move_semantics/under_the_hood.png#center" alt="Under the hood"  />
</p>
<p>Let&rsquo;s verify what I just said with GDB. We are going to examine the stack frame of the <code>move_stack_example</code> function. First of all, let&rsquo;s check the locals variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info locals
</span></span><span style="display:flex;"><span>s2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello world!&#34;</span>
</span></span><span style="display:flex;"><span>s1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello world!&#34;</span>
</span></span></code></pre></div><p>Whoa! Looks like <code>s1</code> and <code>s2</code> have the same value! Actually they are <strong>pointing</strong> to the same value. Let&rsquo;s now see what the addresses of <code>s1</code> and <code>s2</code> are:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p &amp;s1
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>*mut alloc::string::String<span style="color:#f92672">)</span> 0x7fffffffdb08
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p &amp;s2
</span></span><span style="display:flex;"><span>$2 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>*mut alloc::string::String<span style="color:#f92672">)</span> 0x7fffffffdb20
</span></span></code></pre></div><p>Great! Now, we know that <code>s1</code>&rsquo;s stack representation starts at <code>0x7fffffffdb08</code> and <code>s2</code>&rsquo;s starts at <code>0x7fffffffdb20</code>. Let&rsquo;s now see the contents of the stack frame:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/80bu $sp
</span></span><span style="display:flex;"><span>0x7fffffffdaf0:	112	171	217	247	255	127	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffdaf8:	7	125	221	247	255	127	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffdb00:	2	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb08:	208	90	90	85	85	85	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb10:	12	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb18:	12	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb20:	208	90	90	85	85	85	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb28:	12	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb30:	12	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffdb38:	0	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>What do we have at <code>s1</code> and <code>s2</code> addresses? Let&rsquo;s check it out!:</p>
<ul>
<li><strong>ptr</strong>:
<ul>
<li>For <code>s1</code> this value is at <code>0x7fffffffdb08</code>.</li>
<li>For <code>s2</code> this value is at <code>0x7fffffffdb20</code>.</li>
</ul>
</li>
<li><strong>len</strong>:
<ul>
<li>For <code>s1</code> this value is at <code>0x7fffffffdb10</code>.</li>
<li>For <code>s2</code> this value is at <code>0x7fffffffdb28</code>.</li>
</ul>
</li>
<li><strong>capacity</strong>:
<ul>
<li>For <code>s1</code> this value is at <code>0x7fffffffdb18</code>.</li>
<li>For <code>s2</code> this value is at <code>0x7fffffffdb30</code>.</li>
</ul>
</li>
</ul>
<p>As you can see, both <code>ptr</code> values are the same, meaning that both variables are pointing to the same data in the Heap. Let&rsquo;s print them in hexadecimal to get the correct format to explore it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffdb08
</span></span><span style="display:flex;"><span>0x7fffffffdb08: 0x00005555555a5ad0
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffdb20
</span></span><span style="display:flex;"><span>0x7fffffffdb20: 0x00005555555a5ad0
</span></span></code></pre></div><p>So, the <code>ptr</code> value is <code>0x00005555555a5ad0</code>! Now, take a look at the contents of that address in the Heap:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/12c     0x00005555555a5ad0
</span></span><span style="display:flex;"><span>0x5555555a5ad0:	<span style="color:#ae81ff">104</span> <span style="color:#e6db74">&#39;h&#39;</span>	<span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">111</span> <span style="color:#e6db74">&#39;o&#39;</span>	<span style="color:#ae81ff">32</span> <span style="color:#e6db74">&#39; &#39;</span>	<span style="color:#ae81ff">119</span> <span style="color:#e6db74">&#39;w&#39;</span>	<span style="color:#ae81ff">111</span> <span style="color:#e6db74">&#39;o&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5ad8:	<span style="color:#ae81ff">114</span> <span style="color:#e6db74">&#39;r&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">100</span> <span style="color:#e6db74">&#39;d&#39;</span>	<span style="color:#ae81ff">33</span> <span style="color:#e6db74">&#39;!&#39;</span>
</span></span></code></pre></div><p>The <code>hello world!</code> string is there!</p>
<h1 id="conclusion">Conclusion</h1>
<p>It can take some time to get used to working with ownership and move semantics, but, in my opinion, that is well invested time. Manually managing memory (by allocating and freeing it) is not an easy task and <a href="https://en.wikipedia.org/wiki/Manual_memory_management#Manual_management_and_correctness">can create several bugs</a>. With Rust&rsquo;s approach, those bugs are caught at compile time, so they can never happen!</p>
<p>If you want to read more about this topic, check out the <a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html">Rust book</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Stack and Heap</title>
      <link>https://nicoan.net/posts/stack_and_heap/</link>
      <pubDate>Tue, 26 Jul 2022 12:00:00 -0300</pubDate>
      <guid>https://nicoan.net/posts/stack_and_heap/</guid>
      <description>&lt;p&gt;Why write about Stack and Heap when there are already a lot of articles out there? I want to improve my writing skills so, I decided to write articles about things I find interesting. This article was supposed to be about how Rust manages memory through &lt;a href=&#34;https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html&#34;&gt;ownership&lt;/a&gt;. Then I thought &amp;ldquo;I should first write about Stack and Heap&amp;rdquo;. So, here we are).&lt;/p&gt;
&lt;p&gt;To understand memory management first, we need to understand what the Stack and the Heap are. Stack and Heap are memory regions used by a process to store and read values. The memory of a running process can usually be divided in the following four regions:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Why write about Stack and Heap when there are already a lot of articles out there? I want to improve my writing skills so, I decided to write articles about things I find interesting. This article was supposed to be about how Rust manages memory through <a href="https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html">ownership</a>. Then I thought &ldquo;I should first write about Stack and Heap&rdquo;. So, here we are).</p>
<p>To understand memory management first, we need to understand what the Stack and the Heap are. Stack and Heap are memory regions used by a process to store and read values. The memory of a running process can usually be divided in the following four regions:</p>
<p><img loading="lazy" src="/images/stack/memory.png#center" alt="Memory Regions"  />
</p>
<ul>
<li><strong>Text</strong>: Here is where our program instructions live. Our compiled program is loaded and stored in this region of the memory.</li>
<li><strong>Data</strong>: All the global variables are stored in this region.</li>
<li><strong>Stack</strong>: A contiguous chunk of memory that stores local variables, arguments and return addresses of functions (we will go deeper on this in the next section). Every process&rsquo; thread has its own Stack.</li>
<li><strong>Heap</strong>: Stores all the dynamically allocated memory. This region is shared among all threads of a process.</li>
</ul>
<h1 id="stack">Stack</h1>
<p>A process&rsquo; Stack is an actual implementation of the <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">Stack data structure</a>. It is fixed in size; we can not ask the operating system for more memory. This size depends mostly on the OS. In modern Linux systems, the <strong>maximum</strong> Stack size is 8 MB (you can check yours with the command <code>ulimit -s</code>).</p>
<h2 id="inside-the-stack">Inside the Stack</h2>
<p>Every time we call a function, a <em>Stack frame</em> (a chunk of contiguous memory containing all the information required by the recently called function) is created and placed on top of the Stack. And, every time a function ends, the Stack frame is popped from the Stack, automatically releasing all the memory used by it. Let&rsquo;s see a minimal example on how the Stack is populated. Consider the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sum</span>(a: <span style="color:#66d9ef">i32</span>, b: <span style="color:#66d9ef">i32</span>) -&gt; <span style="color:#66d9ef">i32</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> result <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> b;
</span></span><span style="display:flex;"><span>    result
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">square_sum</span>(a: <span style="color:#66d9ef">i32</span>, b: <span style="color:#66d9ef">i32</span>) -&gt; <span style="color:#66d9ef">i32</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> sum_result <span style="color:#f92672">=</span> sum(a, b);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> pow_result <span style="color:#f92672">=</span> sum_result <span style="color:#f92672">*</span> sum_result;
</span></span><span style="display:flex;"><span>    pow_result
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> n1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> n2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> pow_result <span style="color:#f92672">=</span> square_sum(n1, n2);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Result: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, pow_result);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The following diagram represents what happens with the Stack when the program is executed:</p>
<p><img loading="lazy" src="/images/stack/stack_1.png#center" alt="Executing Stack"  />
</p>
<ol>
<li>At the beginning, a Stack frame for the <code>main</code> function is created.</li>
<li><code>main</code> calls <code>square_sum</code>, a Stack frame for <code>square_sum</code> is created.</li>
<li><code>square_sum</code> calls <code>sum</code>, a Stack frame is created for <code>sum</code>.</li>
<li>After <code>sum</code> is called, its Stack frame is destroyed, releasing automatically all the memory it occupied.</li>
<li>After <code>square_sum</code> is called, its Stack frame is destroyed, releasing automatically all the memory it occupied.</li>
<li><code>main</code> prints the result and ends. The operating system frees up all the remaining memory.</li>
</ol>
<p><strong>NOTE</strong>: Usually, the stack grow downwards!</p>
<h2 id="inside-the-stack-frame">Inside the Stack frame</h2>
<p>The Stack frame is where all the local variables, arguments, and return address (this is used by the running process to know where the next code instruction to be executed is, after the function call ends) of a function live. The good news is that the user does not have to worry about allocating or de-allocating the memory used by it (neither with Heap allocations in safe Rust, but that is for another post). Given that the Stack is fixed in size, we can only store data that its size is known at compile time. For dynamic sized data (such as <a href="https://doc.rust-lang.org/std/vec/struct.Vec.html">vectors</a>), Heap memory is used (only a pointer to that part of the Heap memory and <em>maybe</em> some metadata is saved into the Stack). Let&rsquo;s expand the above Stack diagrams to show the stack frame of each function:</p>
<p><img loading="lazy" src="/images/stack/stack_2.png#center" alt="Stack Frame"  />
</p>
<p>How do we use the memory contained in the frame? We have two pointers that helps us with that:</p>
<ul>
<li><strong>Stack Pointer (SP)</strong>: Always points at the top of the Stack. When a Stack frame is created the new SP&rsquo;s value is <code>SP + size_of(new_Stack_frame)</code>. It will change any time a value is pushed onto or popped off the stack. When an executing function returns, it goes back to its previous size.</li>
<li><strong>Base Pointer (BP)</strong>: Also known as <em>Frame Pointer (FP)</em>. Points to the base of the current Stack frame. When a Stack frame is created, the BP gets the value SP had before adding the size of the new Stack frame. The <em>BP</em> is used to access the arguments and local variables of a function by adding/substracting the offset of the variable we want to access. For example, if we want to access the argument <code>y</code>, we need to read the address <code>BP + 12</code> because, first, we have the <code>return address</code> that (let&rsquo;s assume) is 4 bytes long, and then the argument <code>x</code> that is a 32 bits integer (4 bytes).</li>
</ul>
<p>The layout presented here is just an example. Although, in reality, the frames contain the same information, how the data is organized depends on the <a href="https://en.wikipedia.org/wiki/Calling_convention">machine architecture</a> and the <a href="https://en.wikipedia.org/wiki/Application_binary_interface">application binary interface (ABI)</a>.</p>
<p><a href="https://stackoverflow.com/questions/3699283/what-is-stack-frame-in-assembly#answer-3700219">This StackOverflow answer</a> shows how the frame is constructed using x86 assembly.</p>
<h1 id="heap">Heap</h1>
<p>In this context, &ldquo;Heap&rdquo; has nothing to do with the Heap data structure, it is just a name for the free memory pool.</p>
<p>The Heap is not fixed in size. We can ask for more memory, as long as it is available in the system, and free it if the allocated values are not needed anymore. Unlike Stack, when we are working with the Heap we have to take care of the allocation and deallocation of memory (in Rust, <strong>most</strong> allocation/deallocation logic is hidden behind abstractions). When we use the Heap, we are dynamically allocating memory. This comes in very handy when we are dealing with data which size is unknown at compile time (i.e. user input). In opposition to the Stack, the memory allocations are not sequential.</p>
<p>When a process wants to allocate some chunk of memory of a given size, the operating system first has to search for a free piece of memory with the needed size. After finding it, the OS locks it up (only that particular process can access that portion of the system memory) and returns the starting address of the block. This process leads to <em>memory fragmentation</em> (the data allocated in the Heap is <strong>not</strong> contiguous).</p>
<p>When we use the Heap, we also store some data in the Stack (<em>at least</em> a pointer to the allocated data). Consider the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> n1: Box<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> Box::new(<span style="color:#ae81ff">42</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> my_string <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;hello&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, my_string, n1);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>NOTE</strong>: A <a href="https://doc.rust-lang.org/rust-by-example/std/box.html">Box</a> is a smart pointer to a heap allocated value.</p>
<p>The following diagram shows the allocations made in the Stack and the Heap:</p>
<p><img loading="lazy" src="/images/stack/heap.png#center" alt="Heap"  />
</p>
<p>Writing and reading the Heap is slower than writing and reading the Stack for several reasons:</p>
<ul>
<li>For memory allocation, a process has to make a system call and wait for the OS to complete the process described above.</li>
<li>Using the allocated memory (for writing or reading) involves at least one indirection (following the pointer allocated in the Stack).</li>
<li>Under the right conditions, a program can be optimized to store some parts of the Stack inside the processor&rsquo;s cache, making writing/reading operations blazingly fast.</li>
</ul>
<h1 id="summary">Summary</h1>
<table>
  <thead>
      <tr>
          <th>Stack</th>
          <th>Heap</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Fixed in size</td>
          <td>Can grow or shrink</td>
      </tr>
      <tr>
          <td>Allocations are in a contiguous block</td>
          <td>Allocation happens in &ldquo;random&rdquo; order</td>
      </tr>
      <tr>
          <td>Faster access time</td>
          <td>Slower access time</td>
      </tr>
      <tr>
          <td>Is thread local by default: every thread of a process has its own Stack.</td>
          <td>Can be used to share memory across threads</td>
      </tr>
  </tbody>
</table>
]]></content:encoded>
    </item>
  </channel>
</rss>
