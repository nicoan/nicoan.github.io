[{"content":"Ownership y move semantics son dos conceptos que hacen a Rust único. Para entender este tema, es mejor primero entender que son el Stack y el Heap en un nivel básico. ¡Escribí un post sobre eso!\nEs un poco difícil acostumbrarse a estos mecanismos, porque fuerzan al programador a pensar en cosas en las que no se tiene que preocupar en otros lenguajes. ¡Suficiente introducción! vamos a ver de qué se trata todo esto.\nLas tres reglas de ownership Existen tres reglas que gobiernan el sistema de ownership:\nTodo valor inicializado tiene un dueño (owner): Todo valor inicializado tiene una variable a la cual pertenece.¹ Sólo hay un dueño por valor: No pueden existir dos o más variables que sean dueñas del mismo valor en memoria. No se puede compartir la posesión entre variables.² Si el scope de una variable termina, su valor se libera: Cuando un scope termina, todos los valores de las variables contenidas en ese scope se liberan automáticamente. ¹ Pero no todas las variables son dueñas de un valor, éstas pueden contener sólo una referencia. Voy a hablar más en detalle de esto en el artículo \u0026ldquo;Referencias y Borrowing\u0026rdquo;. ² En realidad se puede tener más de un dueño en Rust (sin usar unsafe). Se deben utilizar estructuras especiales como Rc (de todas formas, los múltiples dueños no poseen el valor directamente).\n¡Vamos a probar estas reglas! Pero antes de eso, un pequeño repaso de cómo se representa en memoria el tipo String:\ndonde:\nptr: Un puntero a la primera dirección del Heap donde esta alojado el texto (en este caso hello). len: Cuánta memoria, en bytes, el contenido del texto está utilizando en un momento dado. capacity: La cantidad total de memoria, en bytes, reservada para ese string. GDB En este post voy a explorar qué está pasando en la memoria a través de GNU Debugger (gdb) con el comando especial rust-gdb:\n$ rust-gdb ./target/debug/move_semantics Dentro de GDB, voy a utilizar muchísimo el comando x y el valor $sp (Stack Pointer) para explorar el stack.\nRegla 1: Todo valor inicializado tiene un dueño (owner). Dado el siguiente código:\n1 2 3 4 5 6 7 8 9 fn hello_world() -\u0026gt; u32 { String::from(\u0026#34;hello! I am a free initialized String!\u0026#34;); println!(\u0026#34;{}\u0026#34;, 42); 42 } fn main() { hello_world(); } En la función hello_world tenemos un valor inicializado de tipo String que está libre(no asignado a ninguna variable). ¿Rust inicializó el valor en memoria o simplemente lo ignoró? No tenemos forma de usarlo, entonces\u0026hellip; ¿Por qué Rust lo guardaría? ¡Vamos a ver qué sucede! Cuando compilamos este código vemos la siguiente advertencia:\nwarning: unused return value of `from` that must be used --\u0026gt; src/main.rs:2:5 | 2 | String::from(\u0026#34;hello! I am a free initialized String!\u0026#34;); | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ | = note: `#[warn(unused_must_use)]` on by default Rust nos advierte que debemos utilizar el valor retornado de String::from, de otro modo, no lo podremos acceder de ninguna forma. ¿Qué pasa en la memoria? Vamos a verlo con GDB!\nPrimero ponemos un breakpoint al principio de la función hello_world y ejecutamos la inicialización del String:\nBreakpoint 1, move_semantics::hello_world () at src/main.rs:2 2 String::from(\u0026#34;hello! I am a free initialized String!\u0026#34;); (gdb) n 3 println!(\u0026#34;{}\u0026#34;, 42); En este punto, el String fue inicializado pero no está asignado a ninguna variable. ¡No tiene dueño! Vamos a ver qué pasa en el Stack:\n1 2 3 4 5 6 7 8 9 10 11 (gdb) x/80ub $sp 0x7fffffffd980: 0 240 127 255 255 127 0 0 0x7fffffffd988: 61 60 87 85 85 85 0 0 0x7fffffffd990: 16 90 90 85 85 85 0 0 0x7fffffffd998: 38 0 0 0 0 0 0 0 0x7fffffffd9a0: 38 0 0 0 0 0 0 0 0x7fffffffd9a8: 2 0 0 0 0 0 0 0 0x7fffffffd9b0: 48 0 0 0 0 0 0 0 0x7fffffffd9b8: 96 255 255 255 255 255 255 255 0x7fffffffd9c0: 0 240 127 255 255 127 0 0 0x7fffffffd9c8: 5 0 0 0 0 0 0 0 Aparentemente el valor está ahí, parece ser que nuestro valor inicializado está desde la línea 4 a la 6: Las direcciones de memoria 0x7fffffffd998 y 0x7fffffffd9a0 (líneas 5 y 6) tienen guardado el valor 38 coincidiendo con el largo del String. ¡0x7fffffffd990 (línea 4) debe ser la dirección del Heap donde está alojado el texto! Veamos qué hay dentro de esa dirección de memoria.\nPrimero, imprimimos dicha dirección en hexadecimal:\n(gdb) x/xg 0x7fffffffd990 0x7fffffffd990:\t0x00005555555a5a10 Luego, exploramos qué hay dentro:\n1 2 3 4 5 6 (gdb) x/38cb 0x00005555555a5a10 0x5555555a5a10: 0 \u0026#39;\\000\u0026#39; 0 \u0026#39;\\000\u0026#39; 0 \u0026#39;\\000\u0026#39; 0 \u0026#39;\\000\u0026#39; 0 \u0026#39;\\000\u0026#39; 0 \u0026#39;\\000\u0026#39; 0 \u0026#39;\\000\u0026#39; 0 \u0026#39;\\000\u0026#39; 0x5555555a5a18: 16 \u0026#39;\\020\u0026#39; 80 \u0026#39;P\u0026#39; 90 \u0026#39;Z\u0026#39; 85 \u0026#39;U\u0026#39; 85 \u0026#39;U\u0026#39; 85 \u0026#39;U\u0026#39; 0 \u0026#39;\\000\u0026#39; 0 \u0026#39;\\000\u0026#39; 0x5555555a5a20: 101 \u0026#39;e\u0026#39; 101 \u0026#39;e\u0026#39; 32 \u0026#39; \u0026#39; 105 \u0026#39;i\u0026#39; 110 \u0026#39;n\u0026#39; 105 \u0026#39;i\u0026#39; 116 \u0026#39;t\u0026#39; 105 \u0026#39;i\u0026#39; 0x5555555a5a28: 97 \u0026#39;a\u0026#39; 108 \u0026#39;l\u0026#39; 105 \u0026#39;i\u0026#39; 122 \u0026#39;z\u0026#39; 101 \u0026#39;e\u0026#39; 100 \u0026#39;d\u0026#39; 32 \u0026#39; \u0026#39; 83 \u0026#39;S\u0026#39; 0x5555555a5a30: 116 \u0026#39;t\u0026#39; 114 \u0026#39;r\u0026#39; 105 \u0026#39;i\u0026#39; 110 \u0026#39;n\u0026#39; 103 \u0026#39;g\u0026#39; 33 \u0026#39;!\u0026#39; ¡El String está casi ahí! Parece que el principio fue sobreescrito. No hay problema, ninguna variable es dueña de ese valor, no lo podemos acceder de ninguna forma, por lo que no importa qué suceda con el mismo.\nNOTA: La memoria fue explorada utilizando un binario construido para debug. No estoy seguro de qué pasa si se compila en modo release. Dado que el valor no se usa, creo que Rust no lo inicializa, como una forma de optimización.\nRegla 2: Sólo hay un dueño por valor Dado el siguiente código:\n1 2 3 4 5 6 7 8 fn main() { // Creamos un nuevo valor, con s1 como dueño let s1 = String::from(\u0026#34;hello world!\u0026#34;); // Movemos la posesión del valor a s2 let s2 = s1; // Oops! error al compilar, el valor fue movido! println!(\u0026#34;{}\u0026#34;, s1); } Cuando lo intentamos obtenemos:\nerror[E0382]: borrow of moved value: `s1` --\u0026gt; src/main.rs:7:20 | 3 | let s1 = String::from(\u0026#34;hello world!\u0026#34;); | -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait 4 | // Move ownership from s1 to s2 5 | let s2 = s1; | -- value moved here 6 | // Oops! compiler error, the value has been moved! 7 | println!(\u0026#34;{}\u0026#34;, s1); | ^^ value borrowed here after move Lo que está sucediendo es que la posesión del String \u0026quot;hello world!\u0026quot; es transferida de s1 a s2. Por ese motivo, el compilador invalida el acceso a s1.\nEl valor fue movido porque el tipo String no implementa el trait Copy. Este trait es utilizado en tipos que pueden ser completamente alojados en el Stack y pueden ser duplicados simplemente copiando sus bits sin mucha sobrecarga (duplicar datos en el Heap es bastante más complicado). Cuando un tipo implementa el trait Copy, en lugar comportarse con \u0026ldquo;semántica de movimiento\u0026rdquo; (move semantics) se comporta con \u0026ldquo;semántica de copiado\u0026rdquo; (copy semantics). Este suele ser el caso para los tipos primitivos:\n1 2 3 4 5 6 fn main() { let n1 = 42; let n2 = n1; println!(\u0026#34;{}\u0026#34;, n1); println!(\u0026#34;{} {}\u0026#34;, n1, n2); } Si corremos este código\u0026hellip;\ncargo run Compiling move_semantics v0.1.0 (/home/rust/blog) Finished dev [unoptimized + debuginfo] target(s) in 0.30s Running `target/debug/move_semantics` 42 42 42 ¡Compila! Porque el valor 42 es copiado.\nRegla 3: Si el scope de una variable termina, su valor se libera Dado el siguiente código:\n1 2 3 4 5 6 7 8 fn main() { { // Creamos un nuevo valor con s1 como dueña let s1 = String::from(\u0026#34;hello world!\u0026#34;); } // s1 se libera aca! por ser el final del scope println!(\u0026#34;Checking drop with gdb!\u0026#34;); } La memoria que ocupaba s1 ya va a haber sido liberada cuando la ejecución llegue a la línea 7. Esto es porque las llaves al principio de la función main crean un nuevo scope. Una vez que éste termina, todas las variables que contenía se liberan. Veámoslo en GDB:\nEn la línea 4, podemos encontrar a s1 en las variables locales del scope:\nBreakpoint 1, move_semantics::main () at src/main.rs:4 4\tprintln!(\u0026#34;{}\u0026#34;, s1); (gdb) info locals s1 = \u0026#34;hello world!\u0026#34; Veamos ahora, en qué dirección del Heap se encuentra alojado s1 y qué contiene (recuerden que el primer campo de un String de su representación en el Stack es el puntero al Heap):\n(gdb) p \u0026amp;s1 $1 = (*mut alloc::string::String) 0x7fffffffd960 (gdb) x/xg 0x7fffffffd960 0x7fffffffd960:\t0x00005555555a5ad0 (gdb) x/12c 0x00005555555a5ad0 0x5555555a5ad0:\t104 \u0026#39;h\u0026#39;\t101 \u0026#39;e\u0026#39;\t108 \u0026#39;l\u0026#39;\t108 \u0026#39;l\u0026#39;\t111 \u0026#39;o\u0026#39;\t32 \u0026#39; \u0026#39;\t119 \u0026#39;w\u0026#39;\t111 \u0026#39;o\u0026#39; 0x5555555a5ad8:\t114 \u0026#39;r\u0026#39;\t108 \u0026#39;l\u0026#39;\t100 \u0026#39;d\u0026#39;\t33 \u0026#39;!\u0026#39; Pero cuando el scope termina\u0026hellip;\n7\tprintln!(\u0026#34;Checking drop with gdb!\u0026#34;); (gdb) info locals No locals. (gdb) x/12c 0x00005555555a5ad0 0x5555555a5ad0:\t0 \u0026#39;\\000\u0026#39;\t0 \u0026#39;\\000\u0026#39;\t0 \u0026#39;\\000\u0026#39;\t0 \u0026#39;\\000\u0026#39;\t0 \u0026#39;\\000\u0026#39;\t0 \u0026#39;\\000\u0026#39;\t0 \u0026#39;\\000\u0026#39;\t0 \u0026#39;\\000\u0026#39; 0x5555555a5ad8:\t16 \u0026#39;\\020\u0026#39;\t80 \u0026#39;P\u0026#39;\t90 \u0026#39;Z\u0026#39;\t85 \u0026#39;U\u0026#39; ¡Todas las variables locales fueron liberadas! Es por ese motivo que esa parte del Heap está lleno con otra cosa (probablemente basura).\nMoviendo un valor. ¿Qué pasa por detrás? Dado el siguiente código:\n1 2 3 4 5 6 7 8 9 10 11 12 fn move_stack_example() { // Creamos un nuevo valor de tipo String let s1 = String::from(\u0026#34;hello world!\u0026#34;); // Lo movemos de s1 a s2 let s2 = s1; println!(\u0026#34;{}\u0026#34;, s2); } fn main() { move_stack_example(); } Cuando movemos un valor, éste no desaparece de la memoria, sino que toda su representación en el Stack se duplica y el compilador nos prohíbe acceder a la vieja variable de nuevo.\nVamos a verificar lo que acabo de decir con GDB. Para esto, examinaremos el stack frame de la función move_stack_example. Antes que nada, veamos qué variables locales están definidas:\n(gdb) info locals s2 = \u0026#34;hello world!\u0026#34; s1 = \u0026#34;hello world!\u0026#34; ¡Wow, parece que s1 y s2 contienen el mismo valor! En realidad están apuntando al mismo valor. Vamos a ver qué direcciones de memoria tomaron s1 y s2:\n(gdb) p \u0026amp;s1 $1 = (*mut alloc::string::String) 0x7fffffffdb08 (gdb) p \u0026amp;s2 $2 = (*mut alloc::string::String) 0x7fffffffdb20 ¡Fantástico! Ahora sabemos que la representación de s1 en el stack empieza en la dirección 0x7fffffffdb08 y la representación de s2 empieza en 0x7fffffffdb20. Vamos ahora a ver el contenido del frame:\n1 2 3 4 5 6 7 8 9 10 11 (gdb) x/80bu $sp 0x7fffffffdaf0:\t112\t171\t217\t247\t255\t127\t0\t0 0x7fffffffdaf8:\t7\t125\t221\t247\t255\t127\t0\t0 0x7fffffffdb00:\t2\t0\t0\t0\t0\t0\t0\t0 0x7fffffffdb08:\t208\t90\t90\t85\t85\t85\t0\t0 0x7fffffffdb10:\t12\t0\t0\t0\t0\t0\t0\t0 0x7fffffffdb18:\t12\t0\t0\t0\t0\t0\t0\t0 0x7fffffffdb20:\t208\t90\t90\t85\t85\t85\t0\t0 0x7fffffffdb28:\t12\t0\t0\t0\t0\t0\t0\t0 0x7fffffffdb30:\t12\t0\t0\t0\t0\t0\t0\t0 0x7fffffffdb38:\t0\t0\t0\t0\t0\t0\t0\t0 ¿Qué tenemos en dichas direcciones? ¡La representación en memoria del tipo String! Veamos:\nptr: Para s1 este valor está en 0x7fffffffdb08. Para s2 este valor está en 0x7fffffffdb20. len: Para s1 este valor está en 0x7fffffffdb10. Para s2 este valor está en 0x7fffffffdb28. capacity: Para s1 este valor está en 0x7fffffffdb18. Para s2 este valor está en 0x7fffffffdb30. Como pueden observar, ambos valores de ptr son iguales, lo cuál significa que las dos variables apuntan a los mismos datos en el Heap. Vamos a imprimir estos valores en hexadecimal para obtener el formato correcto para poder explorarlo:\n(gdb) x/xg 0x7fffffffdb08 0x7fffffffdb08: 0x00005555555a5ad0 (gdb) x/xg 0x7fffffffdb20 0x7fffffffdb20: 0x00005555555a5ad0 ¡El valor de ptr es 0x00005555555a5ad0! Ahora vamos a ver el contenido de dicha dirección del Heap:\n(gdb) x/12c 0x00005555555a5ad0 0x5555555a5ad0:\t104 \u0026#39;h\u0026#39;\t101 \u0026#39;e\u0026#39;\t108 \u0026#39;l\u0026#39;\t108 \u0026#39;l\u0026#39;\t111 \u0026#39;o\u0026#39;\t32 \u0026#39; \u0026#39;\t119 \u0026#39;w\u0026#39;\t111 \u0026#39;o\u0026#39; 0x5555555a5ad8:\t114 \u0026#39;r\u0026#39;\t108 \u0026#39;l\u0026#39;\t100 \u0026#39;d\u0026#39;\t33 \u0026#39;!\u0026#39; ¡El texto hello world! está ahí!\nConclusión Puede tomar algo de tiempo acostumbrarse a ownership y move semantics, pero en mi opinión, es tiempo bien invertido. Manejar la memoria de forma manual no es una tarea fácil y puede llevat a tener muchos bugs. Con el enfoque de Rust, estos bugs son detectados en tiempo de compilación para que nunca puedan pasar. Si querés leer más sobre este tema el libro de Rust tiene un capítulo completamente dedicado.\n","permalink":"https://nicoan.github.io/es/posts/move_semantics/","summary":"Ownership y move semantics son dos conceptos que hacen a Rust único. Para entender este tema, es mejor primero entender que son el Stack y el Heap en un nivel básico. ¡Escribí un post sobre eso!\nEs un poco difícil acostumbrarse a estos mecanismos, porque fuerzan al programador a pensar en cosas en las que no se tiene que preocupar en otros lenguajes. ¡Suficiente introducción! vamos a ver de qué se trata todo esto.","title":"Rust ownership y move semantics"},{"content":"¿Por qué escribir sobre Stack y Heap cuando ya existen pila (pun intended) de artículos en internet? Quiero mejorar mi escritura, y para cumplir este objetivo, decidí escribir artículos sobre cosas que encuentro interesantes. La idea es mejorar mi escritura tanto en inglés (ver arriba a la derecha, hay un link a este mismo artículo en dicho idioma) como en español. Originalmente, este post iba a tratar sobre cómo Rust maneja la memoria a través de lo que se conoce como ownership, pero luego pensé \u0026ldquo;debería primero escribir sobre Stack y Heap\u0026rdquo;.\nPara entender cómo administrar el uso de memoria, primero tenemos que entender qué son el Stack y el Heap. Stack y Heap son regiones de memoria utilizadas por procesos para guardar y leer valores. La memoria de un proceso normalmente se puede dividir en cuatro regiones:\nText: Aquí viven las instrucciones del nuestro programa. El programa ya compilado se carga y guarda en esta región. Data: Todas las variables globales se guardan en esta región. Stack: Es un pedazo contíguo de memoria. En esta región se guardan las variables locales, argumentos y dirección de retorno de las funciones (vamos a ver esto más detalladamente en la próxima sección). Cada hilo de ejecución de un proceso tiene su propio Stack. Heap: Guarda todos los valores de memoria que fueron asignados dinámicamente. Esta región es compartida por todos los hilos de un proceso. Stack El Stack de un proceso es una implementación real de la estructura de datos homónima. Su tamaño es fijo; no podemos pedirle al sistema operativo más memoria. Este tamaño depende principalmente del SO. En sistemas Linux modernos, el tamaño máximo es de 8 MB (esto se puede verificar utilizando el comando ulimit -s)\nDentro del Stack Cada vez que llamamos a una función, un Stack frame (un pedazo de memoria contíguo que contiene toda la información requerida por la función recientemente llamada) es creado y puesto en la parte superior del Stack. Este proceso también sucede de forma inversa, es decir, cada vez que una función termina, el Stack frame es eliminado del Stack, liberando automáticamente toda la memoria utilizada por éste. A continuación veremos un ejemplo simple de cómo el Stack se va llenando. Consideremos el siguiente programa:\nfn sum(a: i32, b: i32) -\u0026gt; i32 { let result = a + b; result } fn square_sum(a: i32, b: i32) -\u0026gt; i32 { let sum_result = sum(a, b); let pow_result = sum_result * sum_result; pow_result } fn main() { let n1 = 2; let n2 = 5; let pow_result = square_sum(n1, n2); println!(\u0026#34;Result: {}\u0026#34;, pow_result); } El siguiente diagrama representa qué pasa con el Stack cuando el programa es ejecutado:\nAl principio, un Stack frame para la función main es creado. main llama a square_sum, un Stack frame para square_sum es creado. square_sum llama a sum, un Stack frame es creado para sum. Al terminar sum, su Stack frame es destruido, liberando automáticamente toda la memoria ocupada por esta función. Al terminar square_sum, su Stack frame es destruido, liberando automáticamente toda la memoria ocupada por esta función. main imprime el resultado y el programa termina. El sistema operativo libera toda la memoria restante utilizada por el proceso que ejecutaba nuestro programa. NOTA: Normalmente el stack crece hacia abajo!\nDentro del Stack frame El Stack frame es donde todas las variables locales, argumentos y dirección de retorno (ésta es utilizada para saber cuál es la siguiente instrucción a ejecutar luego de que una llamada a función termina) de una función viven. Las buenas noticias son que el usuario no debe preocuparse por asignar o liberar la memoria utilizada por éste (si utilizamos safe Rust, tampoco lo debe hacer para asignaciones en el Heap, pero eso es para otro artículo). Dado que el Stack tiene un tamaño fijo, sólo podemos guardar datos cuyo tamaño es conocido en tiempo de compilación. Para datos de tamaño variable (por ejemplo, vectores), el Heap es utilizado (sólo un puntero a esa parte del Heap y tal vez algo de metadata es guardada en el Stack). A continuación vamos a expandir los diagramas presentados más arriba para mostrar el Stack frame de cada función:\n¿Cómo utilizamos la memoria contenida en un frame? Existen dos punteros que nos ayudan con eso:\nStack Pointer (SP): Siempre apunta al tope del Stack. Cuando un Stack frame es creado, el nuevo valor de SP es SP + size_of(new_Stack_frame). Este valor cambia cada vez que insertamos o quitamos un elemento. Cuando una función termina su ejecución, vuelve al valor que tenía antes de la llamada. Base Pointer (BP): También conocido como Frame Pointer (FP). Apunta a la base del último Stack frame. Cuando un Stack frame es creado, el BP es usado para acceder a los argumentos y variables locales de una función sumando/restando la posición de la variable que queremos acceder respecto al mismo BP. Por ejemplo, si queremos acceder al argumento y, necesitamos leer la dirección BP + 12 porque, primero, tenemos la dirección de retorno que (asumimos) tiene un tamaño de 4 bytes, y luego, tenemos el argumento x, el cuál es un entero de 32 bits (4 bytes). La estructura presentada aquí es sólo un ejemplo. Aunque en la realidad los Stack frames contienen la misma información, cómo los datos son organizados dependen de la arquitectura de la máquina y de la interfaz binaria de aplicación (ABI por sus siglas en inglés).\nEsta respuesta de StackOverflow muestra cómo el Stack frame es construido utilizando x86 assembly.\nHeap En este contexto, \u0026ldquo;Heap\u0026rdquo; no tiene nada que ver con la estructura de datos Heap. Es sólo el nombre para la región de memoria \u0026ldquo;libre\u0026rdquo;.\nEl Heap no tiene un tamaño fijo. Podemos pedir más memoria, siempre y cuando esté disponible en el sistema, y liberarla si no necesitamos más los valores contenidos en ésta. A diferencia del Stack, cuando trabajamos con el Heap tenemos que admnistrar la asignación/liberación de memoria (en Rust, la mayoría de las asignaciones/liberaciones están escondidas detrás de abstracciones). Cuando utilizamos el Heap, estamos asignando memoria dinámicamente. Esto es muy conveniente cuando trabajamos con datos cuyo tamaño es desconocido en tiempo de compilación (como por ejemplo, texto ingresado por un usuario). Otra diferencia es que, las asignaciones de memoría no son secuenciales.\nCuando un proceso quiere asignar un pedazo de memoria de un tamaño determinado, el sistema operativo primero debe buscar una porción de memoria libre del volumen requerido. Luego de encontrarla, el SO bloquea dicha memoria (sólo el proceso que la pidió la puede acceder) y retorna la dirección correspondiente al primer bloque de ésta. Este proceso nos lleva al problema conocido como fragmentación de memoria (los datos guardados en el Heap no son contíguos).\nCuando utilizamos el Heap, también guardamos algunos datos en el Stack (al menos un puntero a los datos alojados en el Heap). Consideremos el siguiente código:\nfn main() { let n1: Box\u0026lt;u8\u0026gt; = Box::new(42); let my_string = String::from(\u0026#34;hello\u0026#34;); println!(\u0026#34;{} {}\u0026#34;, my_string, n1); } NOTA: Un Box es un puntero inteligente hacia un valor alojado en el Heap.\nEl siguiente diagrama muestra las asignaciones hechas por el programa en el Stack y el Heap:\nEscribir y leer el Heap es más lento que escribir y leer el Stack por varias razones:\nPara la asignación de memoria, un proceso tiene que hacer una llamada al sistema y esperar que el sistema operativo complete el proceso descripto más arriba. Para utilizar la memoria (sea para escribir o leer), tenemos al menos un nivel de indirección (seguir el puntero alojado en el Stack). Bajo las condiciones correctas, un programa puede ser optimizado para guardar algunas partes del Stack dentro de la caché del procesador, haciendo las lecturas/escrituras increíblemente rápidas. Resumen Stack Heap Tamaño fijo Tamaño variable Las asignaciones son contiguas Las asignaciones suceden en orden \u0026ldquo;aleatorio\u0026rdquo; Tiempo de acceso rápido Tiempo de acceso lento Es \u0026ldquo;thread local\u0026rdquo; por definición Puede ser utilizado para compartir memoria entre procesos ","permalink":"https://nicoan.github.io/es/posts/stack_and_heap/","summary":"¿Por qué escribir sobre Stack y Heap cuando ya existen pila (pun intended) de artículos en internet? Quiero mejorar mi escritura, y para cumplir este objetivo, decidí escribir artículos sobre cosas que encuentro interesantes. La idea es mejorar mi escritura tanto en inglés (ver arriba a la derecha, hay un link a este mismo artículo en dicho idioma) como en español. Originalmente, este post iba a tratar sobre cómo Rust maneja la memoria a través de lo que se conoce como ownership, pero luego pensé \u0026ldquo;debería primero escribir sobre Stack y Heap\u0026rdquo;.","title":"Stack y Heap"}]