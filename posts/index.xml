<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Nico Antinori</title>
    <link>https://nicoan.github.io/posts/</link>
    <description>Recent content in Posts on Nico Antinori</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 18 Oct 2022 12:00:00 -0300</lastBuildDate>
    <atom:link href="https://nicoan.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust ownership and move semantics</title>
      <link>https://nicoan.github.io/posts/move_semantics/</link>
      <pubDate>Tue, 18 Oct 2022 12:00:00 -0300</pubDate>
      <guid>https://nicoan.github.io/posts/move_semantics/</guid>
      <description>Ownership and move semantics is one of the things that makes Rust unique. To understand this topic, you need to understand what Stack and Heap are at a basic level. I wrote a post about that! You can check it out if you need a refresher on those concepts. It is a little bit hard to get used to this feature because it forces you to think about stuff that you didn&amp;rsquo;t have to worry about in other languages.</description>
      <content:encoded><![CDATA[<p>Ownership and move semantics is one of the things that makes Rust unique. To understand this topic, you need to understand what Stack and Heap are at a basic level. I wrote a <a href="/posts/stack_and_heap">post</a> about that! You can check it out if you need a refresher on those concepts. It is a little bit hard to get used to this feature because it forces you to think about stuff that you didn&rsquo;t have to worry about in other languages. Enough introduction, let&rsquo;s cut to the chase!</p>
<h1 id="the-three-rules-of-ownership">The three rules of ownership</h1>
<p>There are three rules that governs the ownership system:</p>
<ol>
<li><strong>Every initialized value has an owner</strong>: Every initialized value has a variable that is its owner.¹</li>
<li><strong>There is only <em>one</em> owner per value</strong>: You can&rsquo;t have two or more variables that owns <em>the same</em> value in memory. You can&rsquo;t share ownership between variables.²</li>
<li><strong>If a variable&rsquo;s scope ends, its value gets freed</strong>: When a scope ends, all values owned by variables contained in that scope get automatically freed.</li>
</ol>
<p>¹ But not every variable owns a value, they may just hold a reference. I&rsquo;ll talk about this in the &ldquo;References and Borrowing&rdquo; article. <br>
² Actually you can have more than one owner in safe Rust. You have to use special structures, such as <a href="https://doc.rust-lang.org/stable/std/rc/struct.Rc.html">Rc</a> (multiple owners do not own the value directly though).</p>
<p>Let&rsquo;s test the rules! But before that, a little reminder of how the <code>String</code> type is represented in memory:</p>
<p><img loading="lazy" src="/images/move_semantics/string_repr.png#center" alt="String representation in memory"  />
</p>
<p>where:</p>
<ul>
<li><strong>ptr</strong>: A pointer to the first direction of the Heap containing the string itself (in this case <code>hello</code>).</li>
<li><strong>len</strong>: How much memory, in bytes, the contents of the string is currently using.</li>
<li><strong>capacity</strong>: The total amount of memory, in bytes, allocated for that string.</li>
</ul>
<h3 id="gdb">GDB</h3>
<p>In this post, I am going to explore what is happening in memory using the <a href="https://en.wikipedia.org/wiki/GNU_Debugger">GNU Debugger (gdb)</a> with  the special command <code>rust-gdb</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ rust-gdb ./target/debug/move_semantics
</span></span></code></pre></div><p>I am going to use the <a href="https://visualgdb.com/gdbreference/commands/x">x command</a> a lot to explore the stack and the <code>$sp</code> value (refers to the Stack Pointer).</p>
<h2 id="rule-1-every-initialized-value-has-an-owner">Rule 1: Every initialized value has an owner.</h2>
<p>Consider the following code:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hello_world</span>() -&gt; <span style="color:#66d9ef">u32</span> {
</span></span><span style="display:flex;"><span>    String::from(<span style="color:#e6db74">&#34;hello! I am a free initialized String!&#34;</span>);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">42</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    hello_world();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>In the <code>hello_world</code> function, we have an initialized String  value that is free (not assigned to a variable). Did Rust initialize the value in memory or just ignore it? We can&rsquo;t use it so&hellip; Why would Rust save it? Let&rsquo;s check what happens! When we compile this code we get the following warning:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>warning: unused <span style="color:#66d9ef">return</span> value of <span style="color:#e6db74">`</span>from<span style="color:#e6db74">`</span> that must be used
</span></span><span style="display:flex;"><span> --&gt; src/main.rs:2:5
</span></span><span style="display:flex;"><span>  |
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> |     String::from<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;hello! I am a free initialized String!&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
</span></span><span style="display:flex;"><span>  |
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">=</span> note: <span style="color:#e6db74">`</span><span style="color:#75715e">#[warn(unused_must_use)]` on by default</span>
</span></span></code></pre></div><p>Rust warns us that we must use the returned value of the <code>String::from</code> function, otherwise, we can&rsquo;t access it in any way. What happens in memory? Let&rsquo;s check it out with GDB!</p>
<p>First, we set a breakpoint at the begginning of the <code>hello_world</code> function and execute the <code>String</code> initialization:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Breakpoint 1, move_semantics::hello_world <span style="color:#f92672">()</span> at src/main.rs:2
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>           String::from<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;hello! I am a free initialized String!&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> n
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>           println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{}&#34;</span>, 42<span style="color:#f92672">)</span>;
</span></span></code></pre></div><p>At this point, the <code>String</code> is initialized, but it isn&rsquo;t assigned to a variable. So, it has no owner! Let&rsquo;s check the stack:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/80ub $sp
</span></span><span style="display:flex;"><span>0x7fffffffd980: <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">240</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd988: <span style="color:#ae81ff">61</span>      <span style="color:#ae81ff">60</span>      <span style="color:#ae81ff">87</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd990: <span style="color:#ae81ff">16</span>      <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">85</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd998: <span style="color:#ae81ff">38</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffd9a0: <span style="color:#ae81ff">38</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9a8: <span style="color:#ae81ff">2</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9b0: <span style="color:#ae81ff">48</span>      <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9b8: <span style="color:#ae81ff">96</span>      <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9c0: <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">240</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">255</span>     <span style="color:#ae81ff">127</span>     <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffd9c8: <span style="color:#ae81ff">5</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It seems that the <code>String</code> value is there, lines 4 to 6 looks like our initialized value: memory addresses <code>0x7fffffffd998</code> and <code>0x7fffffffd9a0</code> (lines 5 and 6) have a 38 stored, and the string happens to have 38 characters. <code>0x7fffffffd990</code> (line 4) must be the Heap address where the actual text is allocated! Let&rsquo;s see what&rsquo;s inside that memory address.</p>
<p>First, print the address as hexa:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffd990
</span></span><span style="display:flex;"><span>0x7fffffffd990:	0x00005555555a5a10
</span></span></code></pre></div><p>Then, explore what&rsquo;s inside that address!</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/38cb 0x00005555555a5a10
</span></span><span style="display:flex;"><span>0x5555555a5a10: <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5a18: <span style="color:#ae81ff">16</span> <span style="color:#e6db74">&#39;\020&#39;</span>       <span style="color:#ae81ff">80</span> <span style="color:#e6db74">&#39;P&#39;</span>  <span style="color:#ae81ff">90</span> <span style="color:#e6db74">&#39;Z&#39;</span>  <span style="color:#ae81ff">85</span> <span style="color:#e6db74">&#39;U&#39;</span>  <span style="color:#ae81ff">85</span> <span style="color:#e6db74">&#39;U&#39;</span>  <span style="color:#ae81ff">85</span> <span style="color:#e6db74">&#39;U&#39;</span>  <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>        <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5a20: <span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#ae81ff">32</span> <span style="color:#e6db74">&#39; &#39;</span>  <span style="color:#ae81ff">105</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#ae81ff">110</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#ae81ff">105</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#ae81ff">116</span> <span style="color:#e6db74">&#39;t&#39;</span> <span style="color:#ae81ff">105</span> <span style="color:#e6db74">&#39;i&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5a28: <span style="color:#ae81ff">97</span> <span style="color:#e6db74">&#39;a&#39;</span>  <span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span> <span style="color:#ae81ff">105</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#ae81ff">122</span> <span style="color:#e6db74">&#39;z&#39;</span> <span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#ae81ff">100</span> <span style="color:#e6db74">&#39;d&#39;</span> <span style="color:#ae81ff">32</span> <span style="color:#e6db74">&#39; &#39;</span>  <span style="color:#ae81ff">83</span> <span style="color:#e6db74">&#39;S&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5a30: <span style="color:#ae81ff">116</span> <span style="color:#e6db74">&#39;t&#39;</span> <span style="color:#ae81ff">114</span> <span style="color:#e6db74">&#39;r&#39;</span> <span style="color:#ae81ff">105</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#ae81ff">110</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#ae81ff">103</span> <span style="color:#e6db74">&#39;g&#39;</span> <span style="color:#ae81ff">33</span> <span style="color:#e6db74">&#39;!&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Our <code>String</code> is <strong>mostly</strong> there! But, it appears that the beginning of it was overwritten. It&rsquo;s ok, that value isn&rsquo;t owned by any variable; we can&rsquo;t access it. So, it doesn&rsquo;t matter what happens to it.</p>
<p><strong>NOTE</strong>: This memory exploration was done using a <em>debug</em> build. I am not really sure what happens if this code was compiled in <em>release</em> mode. I believe that Rust does not initialize the value as an optimization, because it is not used.</p>
<h2 id="rule-2-theres-only-one-owner-per-value">Rule 2: There&rsquo;s only one owner per value</h2>
<p>Consider the following code:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Create a new value, with s1 as owner
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> s1 <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;hello world!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Move ownership from s1 to s2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> s2 <span style="color:#f92672">=</span> s1;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Oops! compiler error, the value has been moved!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, s1);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>When we try to compile this, we get:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>error<span style="color:#f92672">[</span>E0382<span style="color:#f92672">]</span>: borrow of moved value: <span style="color:#e6db74">`</span>s1<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> --&gt; src/main.rs:7:20
</span></span><span style="display:flex;"><span>  |
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span> |     let s1 <span style="color:#f92672">=</span> String::from<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;hello world!&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>  |         -- move occurs because <span style="color:#e6db74">`</span>s1<span style="color:#e6db74">`</span> has type <span style="color:#e6db74">`</span>String<span style="color:#e6db74">`</span>, which does not implement the <span style="color:#e6db74">`</span>Copy<span style="color:#e6db74">`</span> trait
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span> |     // Move ownership from s1 to s2
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5</span> |     let s2 <span style="color:#f92672">=</span> s1;
</span></span><span style="display:flex;"><span>  |              -- value moved here
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">6</span> |     // Oops! compiler error, the value has been moved!
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7</span> |     println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{}&#34;</span>, s1<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>  |                    ^^ value borrowed here after move
</span></span></code></pre></div><p>What is happening here is that the ownership of the <code>String</code> <code>&quot;hello world!&quot;</code> is transferred from <code>s1</code> to <code>s2</code>. Because of that, the compiler invalidates the access to <code>s1</code>.</p>
<p>The value was moved because the type <code>String</code> does not implement the <a href="https://doc.rust-lang.org/std/marker/trait.Copy.html">Copy</a> trait. This is used on types that can be <em>fully</em> allocated in the stack and can be duplicated by simply copying bits without much overload (duplicating data in the Heap is much more complicated). When a type implements the <code>Copy</code> trait, instead of having &ldquo;move semantics&rdquo; it has &ldquo;copy semantics&rdquo;. This is usally the case for primitive types:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> n1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">42</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> n2 <span style="color:#f92672">=</span> n1;
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, n1);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, n1, n2);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>If we run this code&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cargo run
</span></span><span style="display:flex;"><span>   Compiling move_semantics v0.1.0 <span style="color:#f92672">(</span>/home/rust/blog<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    Finished dev <span style="color:#f92672">[</span>unoptimized + debuginfo<span style="color:#f92672">]</span> target<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span> in 0.30s
</span></span><span style="display:flex;"><span>     Running <span style="color:#e6db74">`</span>target/debug/move_semantics<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">42</span> <span style="color:#ae81ff">42</span>
</span></span></code></pre></div><p>compiles! Because the value <code>42</code> is copied!</p>
<h2 id="rule-3-if-a-variables-scope-ends-its-value-gets-freed">Rule 3: If a variable&rsquo;s scope ends its value gets freed</h2>
<p>Consider the following code:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Create a new value with s1 as owner
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> s1 <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;hello world!&#34;</span>);
</span></span><span style="display:flex;"><span>    } <span style="color:#75715e">// s1 gets dropped here! since is the end of the scope
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Checking drop with gdb!&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>s1</code> allocation will have been freed when we reach line 7. This is because the curly braces at the beggining of the <code>main</code> function creates a new scope. Once the code reaches the end of it, all the variables that it contained get dropped. Let&rsquo;s check it out in GDB:</p>
<p>On line 4, we can find <code>s1</code> in the locals variables of the scope:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Breakpoint 1, move_semantics::main <span style="color:#f92672">()</span> at src/main.rs:4
</span></span><span style="display:flex;"><span>4	        println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{}&#34;</span>, s1<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info locals
</span></span><span style="display:flex;"><span>s1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello world!&#34;</span>
</span></span></code></pre></div><p>Let&rsquo;s check where the Heap allocation of <code>s1</code> is and what value it contains (remember that the first field of the Stack representation is the pointer to the Heap):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p &amp;s1
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>*mut alloc::string::String<span style="color:#f92672">)</span> 0x7fffffffd960
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffd960
</span></span><span style="display:flex;"><span>0x7fffffffd960:	0x00005555555a5ad0
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/12c 0x00005555555a5ad0
</span></span><span style="display:flex;"><span>0x5555555a5ad0:	<span style="color:#ae81ff">104</span> <span style="color:#e6db74">&#39;h&#39;</span>	<span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">111</span> <span style="color:#e6db74">&#39;o&#39;</span>	<span style="color:#ae81ff">32</span> <span style="color:#e6db74">&#39; &#39;</span>	<span style="color:#ae81ff">119</span> <span style="color:#e6db74">&#39;w&#39;</span>	<span style="color:#ae81ff">111</span> <span style="color:#e6db74">&#39;o&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5ad8:	<span style="color:#ae81ff">114</span> <span style="color:#e6db74">&#39;r&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">100</span> <span style="color:#e6db74">&#39;d&#39;</span>	<span style="color:#ae81ff">33</span> <span style="color:#e6db74">&#39;!&#39;</span>
</span></span></code></pre></div><p>But when the scope finishes&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>7	    println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Checking drop with gdb!&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info locals
</span></span><span style="display:flex;"><span>No locals.
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/12c 0x00005555555a5ad0
</span></span><span style="display:flex;"><span>0x5555555a5ad0:	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>	<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5ad8:	<span style="color:#ae81ff">16</span> <span style="color:#e6db74">&#39;\020&#39;</span>	<span style="color:#ae81ff">80</span> <span style="color:#e6db74">&#39;P&#39;</span>	<span style="color:#ae81ff">90</span> <span style="color:#e6db74">&#39;Z&#39;</span>	<span style="color:#ae81ff">85</span> <span style="color:#e6db74">&#39;U&#39;</span>
</span></span></code></pre></div><p>All the locals variables were dropped and the memory occupied by them freed! That part of the Heap is now filled with something else (probably garbage).</p>
<h1 id="moving-a-value-what-happens-under-the-hood">Moving a value: What happens under the hood?</h1>
<p>Consider the following code:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">move_stack_example</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Create a new String value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> s1 <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;hello world!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Move it from s1 to s2 (s2 takes ownership)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> s2 <span style="color:#f92672">=</span> s1;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, s2);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    move_stack_example();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>When we move a value, it does not dissapears from the memory, instead, whatever is in the stack that belongs to the moved value gets duplicated and the compiler just forbids us from accessing the old variable ever again.</p>
<p><img loading="lazy" src="/images/move_semantics/under_the_hood.png#center" alt="Under the hood"  />
</p>
<p>Let&rsquo;s verify what I just said with GDB. We are going to examine the stack frame of the <code>move_stack_example</code> function. First of all, let&rsquo;s check the locals variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info locals
</span></span><span style="display:flex;"><span>s2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello world!&#34;</span>
</span></span><span style="display:flex;"><span>s1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello world!&#34;</span>
</span></span></code></pre></div><p>Whoa! Looks like <code>s1</code> and <code>s2</code> have the same value! Actually they are <strong>pointing</strong> to the same value. Let&rsquo;s now see what the addresses of <code>s1</code> and <code>s2</code> are:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p &amp;s1
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>*mut alloc::string::String<span style="color:#f92672">)</span> 0x7fffffffdb08
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p &amp;s2
</span></span><span style="display:flex;"><span>$2 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>*mut alloc::string::String<span style="color:#f92672">)</span> 0x7fffffffdb20
</span></span></code></pre></div><p>Great! Now, we know that <code>s1</code>&rsquo;s stack representation starts at <code>0x7fffffffdb08</code> and <code>s2</code>&rsquo;s starts at <code>0x7fffffffdb20</code>. Let&rsquo;s now see the contents of the stack frame:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span></span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/80bu $sp
</span></span><span style="display:flex;"><span>0x7fffffffdaf0:	112	171	217	247	255	127	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffdaf8:	7	125	221	247	255	127	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffdb00:	2	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb08:	208	90	90	85	85	85	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb10:	12	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb18:	12	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb20:	208	90	90	85	85	85	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb28:	12	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>0x7fffffffdb30:	12	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x7fffffffdb38:	0	0	0	0	0	0	0	<span style="color:#ae81ff">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>What do we have at <code>s1</code> and <code>s2</code> addresses? Let&rsquo;s check it out!:</p>
<ul>
<li><strong>ptr</strong>:
<ul>
<li>For <code>s1</code> this value is at <code>0x7fffffffdb08</code>.</li>
<li>For <code>s2</code> this value is at <code>0x7fffffffdb20</code>.</li>
</ul>
</li>
<li><strong>len</strong>:
<ul>
<li>For <code>s1</code> this value is at <code>0x7fffffffdb10</code>.</li>
<li>For <code>s2</code> this value is at <code>0x7fffffffdb28</code>.</li>
</ul>
</li>
<li><strong>capacity</strong>:
<ul>
<li>For <code>s1</code> this value is at <code>0x7fffffffdb18</code>.</li>
<li>For <code>s2</code> this value is at <code>0x7fffffffdb30</code>.</li>
</ul>
</li>
</ul>
<p>As you can see, both <code>ptr</code> values are the same, meaning that both variables are pointing to the same data in the Heap. Let&rsquo;s print them in hexadecimal to get the correct format to explore it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffdb08
</span></span><span style="display:flex;"><span>0x7fffffffdb08: 0x00005555555a5ad0
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xg 0x7fffffffdb20
</span></span><span style="display:flex;"><span>0x7fffffffdb20: 0x00005555555a5ad0
</span></span></code></pre></div><p>So, the <code>ptr</code> value is <code>0x00005555555a5ad0</code>! Now, take a look at the contents of that address in the Heap:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/12c     0x00005555555a5ad0
</span></span><span style="display:flex;"><span>0x5555555a5ad0:	<span style="color:#ae81ff">104</span> <span style="color:#e6db74">&#39;h&#39;</span>	<span style="color:#ae81ff">101</span> <span style="color:#e6db74">&#39;e&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">111</span> <span style="color:#e6db74">&#39;o&#39;</span>	<span style="color:#ae81ff">32</span> <span style="color:#e6db74">&#39; &#39;</span>	<span style="color:#ae81ff">119</span> <span style="color:#e6db74">&#39;w&#39;</span>	<span style="color:#ae81ff">111</span> <span style="color:#e6db74">&#39;o&#39;</span>
</span></span><span style="display:flex;"><span>0x5555555a5ad8:	<span style="color:#ae81ff">114</span> <span style="color:#e6db74">&#39;r&#39;</span>	<span style="color:#ae81ff">108</span> <span style="color:#e6db74">&#39;l&#39;</span>	<span style="color:#ae81ff">100</span> <span style="color:#e6db74">&#39;d&#39;</span>	<span style="color:#ae81ff">33</span> <span style="color:#e6db74">&#39;!&#39;</span>
</span></span></code></pre></div><p>The <code>hello world!</code> string is there!</p>
<h1 id="conclusion">Conclusion</h1>
<p>It can take some time to get used to working with ownership and move semantics, but, in my opinion, that is well invested time. Manually mananging memory (by allocating and freeing it) is not an easy task and <a href="https://en.wikipedia.org/wiki/Manual_memory_management#Manual_management_and_correctness">can create several bugs</a>. With Rust&rsquo;s approach, those bugs are caught at compile time, so they can never happen!</p>
<p>If you want to read more about this topic, check out the <a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html">Rust book</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Stack and Heap</title>
      <link>https://nicoan.github.io/posts/stack_and_heap/</link>
      <pubDate>Tue, 26 Jul 2022 12:00:00 -0300</pubDate>
      <guid>https://nicoan.github.io/posts/stack_and_heap/</guid>
      <description>Why write about Stack and Heap when there are already a lot of articles out there? I want to improve my writing skills so, I decided to write articles about things I find interesting. This article was supposed to be about how Rust manages memory through ownership. Then I thought &amp;ldquo;I should first write about Stack and Heap&amp;rdquo;. So, here we are :).
To understand memory management first, we need to understand what the Stack and the Heap are.</description>
      <content:encoded><![CDATA[<p>Why write about Stack and Heap when there are already a lot of articles out there? I want to improve my writing skills so, I decided to write articles about things I find interesting. This article was supposed to be about how Rust manages memory through <a href="https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html">ownership</a>. Then I thought &ldquo;I should first write about Stack and Heap&rdquo;. So, here we are :).</p>
<p>To understand memory management first, we need to understand what the Stack and the Heap are. Stack and Heap are memory regions used by a process to store and read values. The memory of a running process can usually be divided in the following four regions:</p>
<p><img loading="lazy" src="/images/stack/memory.png#center" alt="Memory Regions"  />
</p>
<ul>
<li><strong>Text</strong>: Here is where our program instructions live. Our compiled program is loaded and stored in this region of the memory.</li>
<li><strong>Data</strong>: All the global variables are stored in this region.</li>
<li><strong>Stack</strong>: A contiguous chunk of memory that stores local variables, arguments and return addresses of functions (we will go deeper on this in the next section). Every process&rsquo; thread has its own Stack.</li>
<li><strong>Heap</strong>: Stores all the dynamically allocated memory. This region is shared among all threads of a process.</li>
</ul>
<h1 id="stack">Stack</h1>
<p>A process&rsquo; Stack is an actual implementation of the <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">Stack data structure</a>. It is fixed in size; we can not ask the operating system for more memory. This size depends mostly on the OS. In modern Linux systems, the <strong>maximum</strong> Stack size is 8 MB (you can check yours with the command <code>ulimit -s</code>).</p>
<h2 id="inside-the-stack">Inside the Stack</h2>
<p>Every time we call a function, a <em>Stack frame</em> (a chunk of contiguous memory containing all the information required by the recently called function) is created and placed on top of the Stack. And, every time a function ends, the Stack frame is popped from the Stack, automatically releasing all the memory used by it. Let&rsquo;s see a minimal example on how the Stack is populated. Consider the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sum</span>(a: <span style="color:#66d9ef">i32</span>, b: <span style="color:#66d9ef">i32</span>) -&gt; <span style="color:#66d9ef">i32</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> result <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> b;
</span></span><span style="display:flex;"><span>    result
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">square_sum</span>(a: <span style="color:#66d9ef">i32</span>, b: <span style="color:#66d9ef">i32</span>) -&gt; <span style="color:#66d9ef">i32</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> sum_result <span style="color:#f92672">=</span> sum(a, b);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> pow_result <span style="color:#f92672">=</span> sum_result <span style="color:#f92672">*</span> sum_result;
</span></span><span style="display:flex;"><span>    pow_result
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> n1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> n2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> pow_result <span style="color:#f92672">=</span> square_sum(n1, n2);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Result: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, pow_result);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The following diagram represents what happens with the Stack when the program is executed:</p>
<p><img loading="lazy" src="/images/stack/stack_1.png#center" alt="Executing Stack"  />
</p>
<ol>
<li>At the beginning, a Stack frame for the <code>main</code> function is created.</li>
<li><code>main</code> calls <code>square_sum</code>, a Stack frame for <code>square_sum</code> is created.</li>
<li><code>square_sum</code> calls <code>sum</code>, a Stack frame is created for <code>sum</code>.</li>
<li>After <code>sum</code> is called, its Stack frame is destroyed, releasing automatically all the memory it occupied.</li>
<li>After <code>square_sum</code> is called, its Stack frame is destroyed, releasing automatically all the memory it occupied.</li>
<li><code>main</code> prints the result and ends. The operating system frees up all the remaining memory.</li>
</ol>
<p><strong>NOTE</strong>: Usually, the stack grow downwards!</p>
<h2 id="inside-the-stack-frame">Inside the Stack frame</h2>
<p>The Stack frame is where all the local variables, arguments, and return address (this is used by the running process to know where the next code instruction to be executed is, after the function call ends) of a function live. The good news is that the user does not have to worry about allocating or de-allocating the memory used by it (neither with Heap allocations in safe Rust, but that is for another post). Given that the Stack is fixed in size, we can only store data that its size is known at compile time. For dynamic sized data (such as <a href="https://doc.rust-lang.org/std/vec/struct.Vec.html">vectors</a>), Heap memory is used (only a pointer to that part of the Heap memory and <em>maybe</em> some metadata is saved into the Stack). Let&rsquo;s expand the above Stack diagrams to show the stack frame of each function:</p>
<p><img loading="lazy" src="/images/stack/stack_2.png#center" alt="Stack Frame"  />
</p>
<p>How do we use the memory contained in the frame? We have two pointers that helps us with that:</p>
<ul>
<li><strong>Stack Pointer (SP)</strong>: Always points at the top of the Stack. When a Stack frame is created the new SP&rsquo;s value is <code>SP + size_of(new_Stack_frame)</code>. It will change any time a value is pushed onto or popped off the stack. When an executing function returns, it goes back to its previous size.</li>
<li><strong>Base Pointer (BP)</strong>: Also known as <em>Frame Pointer (FP)</em>. Points to the base of the current Stack frame. When a Stack frame is created, the BP gets the value SP had before adding the size of the new Stack frame. The <em>BP</em> is used to access the arguments and local variables of a function by adding/substracting the offset of the variable we want to access. For example, if we want to access the argument <code>y</code>, we need to read the address <code>BP + 12</code> because, first, we have the <code>return address</code> that (let&rsquo;s assume) is 4 bytes long, and then the argument <code>x</code> that is a 32 bits integer (4 bytes).</li>
</ul>
<p>The layout presented here is just an example. Although, in reality, the frames contain the same information, how the data is organized depends on the <a href="https://en.wikipedia.org/wiki/Calling_convention">machine architecture</a> and the <a href="https://en.wikipedia.org/wiki/Application_binary_interface">application binary interface (ABI)</a>.</p>
<p><a href="https://stackoverflow.com/questions/3699283/what-is-stack-frame-in-assembly#answer-3700219">This StackOverflow answer</a> shows how the frame is constructed using x86 assembly.</p>
<h1 id="heap">Heap</h1>
<p>In this context, &ldquo;Heap&rdquo; has nothing to do with the Heap data structure, it is just a name for the free memory pool.</p>
<p>The Heap is not fixed in size. We can ask for more memory, as long as it is available in the system, and free it if the allocated values are not needed anymore. Unlike Stack, when we are working with the Heap we have to take care of the allocation and deallocation of memory (in Rust, <strong>most</strong> allocation/deallocation logic is hidden behind abstractions). When we use the Heap, we are dynamically allocating memory. This comes in very handy when we are dealing with data which size is unknown at compile time (i.e. user input). In opposition to the Stack, the memory allocations are not sequential.</p>
<p>When a process wants to allocate some chunk of memory of a given size, the operating system first has to search for a free piece of memory with the needed size. After finding it, the OS locks it up (only that particular process can access that portion of the system memory) and returns the starting address of the block. This process leads to <em>memory fragmentation</em> (the data allocated in the Heap is <strong>not</strong> contiguous).</p>
<p>When we use the Heap, we also store some data in the Stack (<em>at least</em> a pointer to the allocated data). Consider the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> n1: Box<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> Box::new(<span style="color:#ae81ff">42</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> my_string <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;hello&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, my_string, n1);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>NOTE</strong>: A <a href="https://doc.rust-lang.org/rust-by-example/std/box.html">Box</a> is a smart pointer to a heap allocated value.</p>
<p>The following diagram shows the allocations made in the Stack and the Heap:</p>
<p><img loading="lazy" src="/images/stack/heap.png#center" alt="Heap"  />
</p>
<p>Writing and reading the Heap is slower than writing and reading the Stack for several reasons:</p>
<ul>
<li>For memory allocation, a process has to make a system call and wait for the OS to complete the process described above.</li>
<li>Using the allocated memory (for writing or reading) involves at least one indirection (following the pointer allocated in the Stack).</li>
<li>Under the right conditions, a program can be optimized to store some parts of the Stack inside the processor&rsquo;s cache, making writing/reading operations blazingly fast.</li>
</ul>
<h1 id="summary">Summary</h1>
<table>
<thead>
<tr>
<th>Stack</th>
<th>Heap</th>
</tr>
</thead>
<tbody>
<tr>
<td>Fixed in size</td>
<td>Can grow or shrink</td>
</tr>
<tr>
<td>Allocations are in a contiguous block</td>
<td>Allocation happens in &ldquo;random&rdquo; order</td>
</tr>
<tr>
<td>Faster access time</td>
<td>Slower access time</td>
</tr>
<tr>
<td>Is thread local by default: every thread of a process has its own Stack.</td>
<td>Can be used to share memory across threads</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
  </channel>
</rss>
